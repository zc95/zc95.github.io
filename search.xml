<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[数组复习]]></title>
      <url>/2017/11/21/arrayReview/</url>
      <content type="html"><![CDATA[<h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><pre><code class="javascript">var ary = [1,23,4];
console.log(typeof ary); //输出结果是Object
</code></pre>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><pre><code class="javascript">var ary = [1,23,4];
console.log(ary instanceof Array)//true;
</code></pre>
<h3 id="原型链方法"><a href="#原型链方法" class="headerlink" title="原型链方法"></a>原型链方法</h3><pre><code class="javascript">var ary = [1,23,4];
console.log(ary.__proto__.constructor==Array);//true
console.log(ary.constructor==Array)//true 这两段代码是一样的
</code></pre>
<blockquote>
<p>以上三种方法都不太好，<code>instanceof</code> 和 <code>constructor</code> 判断的变量，必须在当前页面声明的，比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个arr，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false；</p>
</blockquote>
<h3 id="正确方法"><a href="#正确方法" class="headerlink" title="正确方法"></a>正确方法</h3><pre><code class="javascript">var ary = [1,2,3,4];
function isArray(e){
return Object.prototype.toString.call(e)==&#39;[object Array]&#39;;
}
console.log(isArray(ary));
</code></pre>
<h3 id="自己封装的基本数据类型验证"><a href="#自己封装的基本数据类型验证" class="headerlink" title="自己封装的基本数据类型验证"></a>自己封装的基本数据类型验证</h3><pre><code class="javascript">var type = {
  isObj: function(o) {
    return Object.prototype.toString.call(o) == &quot;[object Object]&quot;;
  },
  isArray: function(o) {
    return Object.prototype.toString.call(o) == &quot;[object Array]&quot;;
  },
  isNull: function(o) {
    return Object.prototype.toString.call(o) == &quot;[object Null]&quot;;
  },
  isUndefined: function(o) {
    return Object.prototype.toString.call(o) == &quot;[object Undefined]&quot;;
  },
  isBoolean: function(o) {
    return Object.prototype.toString.call(o) == &quot;[object Boolean]&quot;;
  },
  isString: function(o) {
    return Object.prototype.toString.call(o) == &quot;[object String]&quot;;
  },
  isNumber: function(o) {
    return Object.prototype.toString.call(o) == &quot;[object Number]&quot;;
  },
  isDocument: function() {
    return Object.prototype.toString.call(o) == &quot;[object Document]&quot; || &quot;[object HTMLDocument]&quot;;
  }
}

------------------------------
&gt;console.log(type.isArray([1,2,3]));
&gt;true
</code></pre>
<h2 id="push-和pop"><a href="#push-和pop" class="headerlink" title="push()和pop()"></a>push()和pop()</h2><ul>
<li><code>push()</code> 向数组末尾添加任意个项并返回新数组的长度</li>
<li><code>pop()</code> 从数组末尾移除最后一项，减少数组的length值 （返回的是移除的项）</li>
</ul>
<h2 id="shift-和unshift"><a href="#shift-和unshift" class="headerlink" title="shift()和unshift()"></a>shift()和unshift()</h2><ul>
<li><p><code>unshift()</code> 向数组前端添加任意个项并返回新数组的长度</p>
</li>
<li><p><code>shift()</code> 从数组前端移除第一项，减少数组的length值 （返回的是移除的项）</p>
</li>
</ul>
<h2 id="重排序-sort-reverse"><a href="#重排序-sort-reverse" class="headerlink" title="重排序 sort() reverse()"></a>重排序 sort() reverse()</h2><pre><code class="javascript">function compare(a,b){
  return a-b;//升序
  //return b-a; 或者在升序方法之后使用reverse()反转数组
}
arr.sort(compare);
</code></pre>
<h2 id="操作方法-concat-slice-splice"><a href="#操作方法-concat-slice-splice" class="headerlink" title="操作方法 concat() slice() splice()"></a>操作方法 concat() slice() splice()</h2><ul>
<li><p><code>concat()</code> 方法用于连接两个或多个数组，不会改变原始数组。</p>
</li>
<li><p><code>slice()</code> 方法可从已有的数组中返回选定的元素，不会改变原始数组。</p>
<blockquote>
<p>arrayObject.slice(start,end)</p>
</blockquote>
<p>| 参数    | 描述                                       |<br>| —– | —————————————- |<br>| start | 必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。 |<br>| end   | 可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。 |</p>
</li>
<li><p><code>splice()</code> 方法向/从数组中添加/删除项目，然后返回被删除的项目，会改变原始数组。</p>
<blockquote>
<p>arrayObject.splice(index,howmany,item1,…..,itemX)</p>
</blockquote>
<p>| 参数                | 描述                                  |<br>| —————– | ———————————– |<br>| index             | 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。 |<br>| howmany           | 必需。要删除的项目数量。如果设置为 0，则不会删除项目。        |<br>| item1, …, itemX | 可选。向数组添加的新项目。                       |</p>
</li>
</ul>
<h2 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h2><p>###indexOF() </p>
<blockquote>
<p>indexOF() 从前往后查找，返回首次出现的位置（没有返回-1）</p>
</blockquote>
<p>###lastindexOf() </p>
<blockquote>
<p>lastindexOf() 从后往前查找，返回首次出现的位置（没有返回-1）</p>
</blockquote>
<p>##迭代方法</p>
<blockquote>
<p>迭代是重复反馈过程的活动，其目的通常是为了逼近所需目标或结果。每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值。</p>
</blockquote>
<ol>
<li>every(): 对数组中的每一项运行给定的函数，如果该函数对每一项都返回true，则结果返回true。</li>
<li>filter(): 对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组。</li>
<li>forEach(): 对数组中的每一项运行给定函数，这个方法没有返回值。</li>
<li>map(): 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>
<li>some(): 对数组中的每一项运行给定函数，如果该函数任意一项返回true，则返回true。</li>
</ol>
<h3 id="every-和some"><a href="#every-和some" class="headerlink" title="every()和some()"></a>every()和some()</h3><pre><code class="javascript">var numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];
var everyResult = numbers.every(function(item, index, array) {
    return (item &gt; 2);
});
var someResult = numbers.some(function(item) {
    return (item &gt; 2);
});
console.log(everyResult);      //false
console.log(someResult);        //true
</code></pre>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><pre><code class="javascript">var numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];
var filterResult = numbers.filter(function(item) {
    return (item &gt; 2);
});

console.log(filterResult);  \\[3, 4, 5, 4, 3]
</code></pre>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><pre><code class="javascript">var numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];
var mapResult = numbers.map(function(item) {
    return (item * 2);
});

console.log(mapResult);     //[2, 4, 6, 8, 10, 8, 6, 4, 2]
</code></pre>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><pre><code class="javascript">var numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];
numbers.forEach(function(item, index, arr) {
    //这里执行一些操作
});
</code></pre>
]]></content>
      
        <categories>
            
            <category> 汇总篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义range滑块]]></title>
      <url>/2017/11/17/rangeUI/</url>
      <content type="html"><![CDATA[<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p><img src="http://sandbox.runjs.cn/uploads/rs/234/bxxwrmn8/range.png" alt="range.png"></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ul>
<li><a href="http://jsrun.net/nciKp/show" target="_blank" rel="external">DEMO</a></li>
<li><a href="http://jsrun.net/nciKp/edit" target="_blank" rel="external">源码</a></li>
<li><a href="http://jsrun.net/IciKp/show" target="_blank" rel="external">简易版DEMO</a></li>
</ul>
<h2 id="导入jQuery-CSS和JS"><a href="#导入jQuery-CSS和JS" class="headerlink" title="导入jQuery, CSS和JS"></a>导入jQuery, CSS和JS</h2><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><h3 id="http-jsrun-net-CciKp-css"><a href="#http-jsrun-net-CciKp-css" class="headerlink" title="http://jsrun.net/CciKp.css"></a><a href="http://jsrun.net/CciKp.css" target="_blank" rel="external">http://jsrun.net/CciKp.css</a></h3><pre><code class="css">  p {
    font-family: &quot;微软雅黑&quot;;
    letter-spacing: -1px;
    text-shadow: -2px -1px 1px #fff, 1px 2px 2px rgba(0, 0, 0, 0.2);
    font-weight: 300;
    font-size: 36px;
    margin: 10px;
  }

  input[type=range] {
      -webkit-appearance: none;
      width: 300px;
      border-radius: 10px; /*这个属性设置使填充进度条时的图形为圆角*/
      background: -webkit-linear-gradient(#2EB969, #2EB969) no-repeat;/*进度条的颜色*/
      background-size: 0% 100%;
  }

  input[type=range]:focus {
      outline: none;
  }
  input[type=range]:hover {
      cursor:pointer;
  }

  input[type=range]::-webkit-slider-runnable-track {
      height: 6px;
      border-radius: 10px; /*将轨道设为圆角的*/
    box-shadow: 0.2px 0.2px 1px 0.8px #cec8c8 inset; /*添加底部阴影*/
  }

  input[type=range]::-webkit-slider-thumb {
      -webkit-appearance: none;
    cursor: pointer;
    height: 20px;
    width: 20px;
    margin-top:-6px;
    border-radius: 50%;
    background-color:white;
    box-shadow: 0px 0px 3px 1px #DEDEDE;
  }
</code></pre>
<p>  ​</p>
<h3 id="http-jsrun-net-CciKp-js"><a href="#http-jsrun-net-CciKp-js" class="headerlink" title="http://jsrun.net/CciKp.js"></a><a href="http://jsrun.net/CciKp.js" target="_blank" rel="external">http://jsrun.net/CciKp.js</a></h3><pre><code class="javascript">  $.fn.RangeSlider = function(cfg){
      var userAgent = navigator.userAgent;
      var isWebkit = (userAgent.indexOf(&quot;AppleWebKit&quot;) &gt;= 0);
      var isIE = isIE();

      function isIE() {
          var isIE = false;
          if (window.ActiveXObject || &quot;ActiveXObject&quot; in window) {
              isIE = true;
          } else {
              isIE = (userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1
                  &amp;&amp; !(userAgent.indexOf(&quot;Opera&quot;) &gt; -1));
              isIE = false;
          }
          return isIE;
      }

      this.sliderCfg = {
          min: cfg &amp;&amp; !isNaN(parseFloat(cfg.min)) ? Number(cfg.min) : null, 
          max: cfg &amp;&amp; !isNaN(parseFloat(cfg.max)) ? Number(cfg.max) : null,
          step: cfg &amp;&amp; Number(cfg.step) ? cfg.step : 1,
          callback: cfg &amp;&amp; cfg.callback ? cfg.callback : null
      };

      var $input = $(this);
      var min = this.sliderCfg.min;
      var max = this.sliderCfg.max;
      var step = this.sliderCfg.step;
      var callback = this.sliderCfg.callback;

      $input.attr(&#39;min&#39;, min)
          .attr(&#39;max&#39;, max)
          .attr(&#39;step&#39;, step);

      var event = null;
      if (isIE) {
          event = &quot;change&quot;;
      } else {
          event = &quot;input&quot;;
      }

      $input.bind(event, function(e){
          $input.attr(&#39;value&#39;, this.value);

          if (isWebkit) {
              $input.css( &#39;background-size&#39;, this.value + &#39;% 100%&#39; ); 
          }

          if ($.isFunction(callback)) {
              callback(this);
          }
      });
  };
</code></pre>
<p>  ​</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code class="html">&lt;p&gt;
  进度条&amp;emsp;&lt;span id=&quot;num&quot;&gt;0&lt;/span&gt;%
&lt;/p&gt;
&lt;input type=&quot;range&quot; value=&quot;0&quot;&gt;
</code></pre>
<pre><code class="css">$(function() {
  $(&#39;input&#39;).RangeSlider({
    step: 0.1,
    callback: change
  });
});
var change = function($input) {
  /*内容可自行定义*/
  $(&quot;#num&quot;).text($(&#39;input&#39;).val());
}
</code></pre>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[column]]></title>
      <url>/2017/11/11/column/</url>
      <content type="html"><![CDATA[<h2 id="CSS3多列"><a href="#CSS3多列" class="headerlink" title="CSS3多列"></a>CSS3多列</h2><p>CSS3 可以将文本内容设计成像报纸一样的多列布局，如下实例：</p>
<p><img src="http://sandbox.runjs.cn/uploads/rs/234/bxxwrmn8/fo2zxn7p.png" alt="示例"></p>
<h2 id="CSS3-多列属性"><a href="#CSS3-多列属性" class="headerlink" title="CSS3 多列属性"></a>CSS3 多列属性</h2><ul>
<li><code>column-count</code></li>
<li><code>column-gap</code></li>
<li><code>column-rule-style</code></li>
<li><code>column-rule-width</code></li>
<li><code>column-rule-color</code></li>
<li><code>column-rule</code></li>
<li><code>column-span</code></li>
<li><code>column-width</code></li>
</ul>
<h2 id="CSS3-创建多列"><a href="#CSS3-创建多列" class="headerlink" title="CSS3 创建多列"></a>CSS3 创建多列</h2><p><code>column-count</code> 属性指定了需要分割的列数</p>
<p>以下实例将 <code>&lt;div&gt;</code> 元素中的文本分为 3 列：</p>
<pre><code class="css">.newspaper
{
    -moz-column-count:3; /* Firefox */
    -webkit-column-count:3; /* Safari and Chrome */
    column-count:3;
}
</code></pre>
<pre><code class="html">&lt;div class=&quot;newspaper&quot;&gt;....................&lt;/div&gt;
</code></pre>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-count" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="CSS3-多列中列与列间的间隙"><a href="#CSS3-多列中列与列间的间隙" class="headerlink" title="CSS3 多列中列与列间的间隙"></a>CSS3 多列中列与列间的间隙</h2><p><code>column-gap</code> 属性指定了列与列间的间隙</p>
<p>以下实例指定了列与列间的间隙为 40 像素：</p>
<pre><code class="css">.newspaper
{
    -moz-column-count:3; /* Firefox */
    -webkit-column-count:3; /* Safari and Chrome */
    column-count:3;

    -moz-column-gap:40px; /* Firefox */
    -webkit-column-gap:40px; /* Safari and Chrome */
    column-gap:40px;
}
</code></pre>
<pre><code class="html">&lt;div class=&quot;newspaper&quot;&gt;....................&lt;/div&gt;
</code></pre>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-gap" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="CSS3-列边框"><a href="#CSS3-列边框" class="headerlink" title="CSS3 列边框"></a>CSS3 列边框</h2><p><code>column-rule-style</code> 属性指定了列与列间的边框样式：</p>
<pre><code class="css">.newspaper
{
    -webkit-column-rule-style: solid; /* Chrome, Safari, Opera */
    -moz-column-rule-style: solid; /* Firefox */
    column-rule-style: solid;
}
</code></pre>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-rule-style" target="_blank" rel="external">尝试一下 »</a></p>
<p><code>column-rule-width</code> 属性指定了两列的边框厚度：</p>
<pre><code class="css">div {
    -webkit-column-rule-width: 1px; /* Chrome, Safari, Opera */
    -moz-column-rule-width: 1px; /* Firefox */
    column-rule-width: 1px;
}
</code></pre>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-rule-width" target="_blank" rel="external">尝试一下 »</a></p>
<p><code>column-rule-color</code> 属性指定了两列的边框颜色：</p>
<pre><code class="css">div {
    -webkit-column-rule-color: lightblue; /* Chrome, Safari, Opera */
    -moz-column-rule-color: lightblue; /* Firefox */
    column-rule-color: lightblue;
}
</code></pre>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-rule-color" target="_blank" rel="external">尝试一下 »</a></p>
<p><code>column-rule</code> 属性是 column-rule-* 所有属性的简写。</p>
<p>以下实例设置了列直接的边框的厚度，样式及颜色：</p>
<pre><code class="css">div {
    -webkit-column-rule: 1px solid lightblue; /* Chrome, Safari, Opera */
    -moz-column-rule: 1px solid lightblue; /* Firefox */
    column-rule: 1px solid lightblue;
}
</code></pre>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-rule" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="指定元素跨越多少列"><a href="#指定元素跨越多少列" class="headerlink" title="指定元素跨越多少列"></a>指定元素跨越多少列</h2><p>以下实例指定 <code>&lt;h2&gt;</code> 元素跨越所有列：</p>
<pre><code class="css">h2 {
    -webkit-column-span: all; /* Chrome, Safari, Opera */
    column-span: all;
}
</code></pre>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-span" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="指定列的宽度"><a href="#指定列的宽度" class="headerlink" title="指定列的宽度"></a>指定列的宽度</h2><p><code>column-width</code> 属性指定了列的宽度。</p>
<pre><code class="css">div {
    -webkit-column-width: 100px; /* Chrome, Safari, Opera */
    column-width: 100px;
}
</code></pre>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-width" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="CSS3-多列属性-1"><a href="#CSS3-多列属性-1" class="headerlink" title="CSS3 多列属性"></a>CSS3 多列属性</h2><p>下表列出了所有 CSS3 的多列属性：</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-count.html" target="_blank" rel="external">column-count</a></td>
<td>指定元素应该被分割的列数。</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-fill.html" target="_blank" rel="external">column-fill</a></td>
<td>指定如何填充列</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-gap.html" target="_blank" rel="external">column-gap</a></td>
<td>指定列与列之间的间隙</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-rule.html" target="_blank" rel="external">column-rule</a></td>
<td>所有 column-rule-* 属性的简写</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-rule-color.html" target="_blank" rel="external">column-rule-color</a></td>
<td>指定两列间边框的颜色</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-rule-style.html" target="_blank" rel="external">column-rule-style</a></td>
<td>指定两列间边框的样式</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-rule-width.html" target="_blank" rel="external">column-rule-width</a></td>
<td>指定两列间边框的厚度</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-span.html" target="_blank" rel="external">column-span</a></td>
<td>指定元素要跨越多少列</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-width.html" target="_blank" rel="external">column-width</a></td>
<td>指定列的宽度</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-columns.html" target="_blank" rel="external">columns</a></td>
<td>设置 column-width 和 column-count 的简写</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
            <tag> 布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[类似Windows文件的布局问题]]></title>
      <url>/2017/11/03/AdaptiveLayout/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何做到类似windows文件的布局：无论如何改变窗口（屏幕）的大小，文件或者文件夹的大小都是固定的，不同的是一行显示的数目会有所变化；</p>
<h2 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h2><p>首先这类布局，肯定会先想到百分比的方法（最快的方法），在不同手机上看的话当然没区别，比如一行显示4个的话，那么一个就是25%，但如果放到ipad或者电脑上来看的话，就大的有些恐怖了</p>
<h2 id="百分比加-media布局"><a href="#百分比加-media布局" class="headerlink" title="百分比加@media布局"></a>百分比加@media布局</h2><p>同上，我们可以用@media的方法来解决不同类型设备的差异问题，也就是多写几行css的问题</p>
<h2 id="我的方法"><a href="#我的方法" class="headerlink" title="我的方法"></a>我的方法</h2><p><code>var eachWidth = $(document).width() / Math.floor($(document).width() / 80);</code></p>
<p>假如我想每个div都在80px左右，那么一行就可以放 <code>$(document).width() / 80</code> 个，用 <code>Math.floor</code> 向下取整之后可以去掉不满一个的零头，再用屏幕宽度除以这个取整后的个数，就能得到长度在80±10的eachWidth值了</p>
<p>下面是在控制台的不同手机屏幕大小下console出来的数据：</p>
<pre><code class="javascript">$(document).width() / Math.floor($(document).width() / 80) //iPad
--&gt; 85.33333333333333

$(document).width() / Math.floor($(document).width() / 80) //iPhone 6 Plus
--&gt; 82.8

$(document).width() / Math.floor($(document).width() / 80) //iPhone 6
--&gt; 93.75

$(document).width() / Math.floor($(document).width() / 80) //iPhone 5
--&gt; 80

$(document).width() / Math.floor($(document).width() / 80) //Nexus 6P
--&gt; 82.4
</code></pre>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><ul>
<li><p>移动端</p>
<p><img src="http://sandbox.runjs.cn/uploads/rs/234/bxxwrmn8/buju1.png" alt="iPhone"></p>
</li>
</ul>
<ul>
<li><p>iPad</p>
<p><img src="http://sandbox.runjs.cn/uploads/rs/234/bxxwrmn8/buju2.png" alt="iPad"></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 页面布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原生javascript和jquery的用法对比]]></title>
      <url>/2017/10/25/jsAndJq/</url>
      <content type="html"><![CDATA[<h2 id="选取元素"><a href="#选取元素" class="headerlink" title="选取元素"></a>选取元素</h2><pre><code>// jQuery
var els = $(&#39;.el&#39;);

// Native
var els = document.querySelectorAll(&#39;.el&#39;);

// Shorthand
var $ = function (el) {
  return document.querySelectorAll(el);
}
</code></pre><p>querySelectorAll方法返回的是NodeList对象，需要转换为数组。</p>
<pre><code>myList = Array.prototype.slice.call(myNodeList)
</code></pre><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><pre><code>// jQuery
var newEl = $(&#39;&lt;div&gt;&lt;/div&gt;&#39;);

// Native
var newEl = document.createElement(&#39;div&#39;);
</code></pre><h2 id="添加事件"><a href="#添加事件" class="headerlink" title="添加事件"></a>添加事件</h2><pre><code>// jQuery
$(&#39;.el&#39;).on(&#39;event&#39;, function() {

});

// Native
[].forEach.call(document.querySelectorAll(&#39;.el&#39;), function (el) {
  el.addEventListener(&#39;event&#39;, function() {

  }, false);
});
</code></pre><h2 id="get-set属性"><a href="#get-set属性" class="headerlink" title="get/set属性"></a>get/set属性</h2><pre><code>// jQuery
$(&#39;.el&#39;).filter(&#39;:first&#39;).attr(&#39;key&#39;, &#39;value&#39;);
$(&#39;.el&#39;).filter(&#39;:first&#39;).attr(&#39;key&#39;);

// Native
document.querySelector(&#39;.el&#39;).setAttribute(&#39;key&#39;, &#39;value&#39;);
document.querySelector(&#39;.el&#39;).getAttribute(&#39;key&#39;);
</code></pre><h2 id="添加和移除样式Class"><a href="#添加和移除样式Class" class="headerlink" title="添加和移除样式Class"></a>添加和移除样式Class</h2><p>DOM元素本身有一个可读写的className属性，可以用来操作class。</p>
<p>HTML 5还提供一个classList对象，功能更强大（IE 9不支持）。</p>
<pre><code>// jQuery
$(&#39;.el&#39;).addClass(&#39;class&#39;);
$(&#39;.el&#39;).removeClass(&#39;class&#39;);
$(&#39;.el&#39;).toggleClass(&#39;class&#39;);

// Native
document.querySelector(&#39;.el&#39;).classList.add(&#39;class&#39;);
document.querySelector(&#39;.el&#39;).classList.remove(&#39;class&#39;);
document.querySelector(&#39;.el&#39;).classList.toggle(&#39;class&#39;);
</code></pre><h2 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h2><p>尾部追加元素：</p>
<pre><code>// jQuery
$(&#39;.el&#39;).append($(&#39;&lt;div/&gt;&#39;));

// Native
document.querySelector(&#39;.el&#39;).appendChild(document.createElement(&#39;div&#39;));
</code></pre><p>头部追加元素：</p>
<pre><code>//jQuery
$(‘.el’).prepend(&#39;&lt;div&gt;&lt;/div&gt;&#39;)

//Native
var parent = document.querySelector(&#39;.el&#39;);
parent.insertBefore(&quot;&lt;div&gt;&lt;/div&gt;&quot;,parent.childNodes[0])
</code></pre><h2 id="克隆元素"><a href="#克隆元素" class="headerlink" title="克隆元素"></a>克隆元素</h2><pre><code>// jQuery
var clonedEl = $(&#39;.el&#39;).clone();

// Native
var clonedEl = document.querySelector(&#39;.el&#39;).cloneNode(true);
</code></pre><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><pre><code>Remove
// jQuery
$(&#39;.el&#39;).remove();

// Native
remove(&#39;.el&#39;);

function remove(el) {
  var toRemove = document.querySelector(el);

  toRemove.parentNode.removeChild(toRemove);
}
</code></pre><h2 id="获取父级元素"><a href="#获取父级元素" class="headerlink" title="获取父级元素"></a>获取父级元素</h2><pre><code>// jQuery
$(&#39;.el&#39;).parent();

// Native
document.querySelector(&#39;.el&#39;).parentNode;
</code></pre><h2 id="获取上一个-下一个元素（Prev-next-element）"><a href="#获取上一个-下一个元素（Prev-next-element）" class="headerlink" title="获取上一个/下一个元素（Prev/next element）"></a>获取上一个/下一个元素（Prev/next element）</h2><pre><code>// jQuery
$(&#39;.el&#39;).prev();
$(&#39;.el&#39;).next();

// Native
document.querySelector(&#39;.el&#39;).previousElementSibling;
document.querySelector(&#39;.el&#39;).nextElementSibling;
</code></pre><h2 id="XHR-and-AJAX"><a href="#XHR-and-AJAX" class="headerlink" title="XHR and AJAX"></a>XHR and AJAX</h2><pre><code>// jQuery
$.get(&#39;url&#39;, function (data) {

});
$.post(&#39;url&#39;, {data: data}, function (data) {

});

// Native

// get
var xhr = new XMLHttpRequest();

xhr.open(&#39;GET&#39;, url);
xhr.onreadystatechange = function (data) {

}
xhr.send();

// post
var xhr = new XMLHttpRequest()

xhr.open(&#39;POST&#39;, url);
xhr.onreadystatechange = function (data) {

}
xhr.send({data: data});
</code></pre><h2 id="清空子元素"><a href="#清空子元素" class="headerlink" title="清空子元素"></a>清空子元素</h2><pre><code>//jQuery
$(&quot;#elementID&quot;).empty()

//Native
var element = document.getElementById(&quot;elementID&quot;)
while(element.firstChild) element.removeChild(element.firstChild);
</code></pre><h2 id="检查是否有子元素"><a href="#检查是否有子元素" class="headerlink" title="检查是否有子元素"></a>检查是否有子元素</h2><pre><code>//jQuery
if (!$(&quot;#elementID&quot;).is(&quot;:empty&quot;)){}

//Native
if (document.getElementById(&quot;elementID&quot;).hasChildNodes()){}
</code></pre><h2 id="document-ready"><a href="#document-ready" class="headerlink" title="$(document).ready"></a>$(document).ready</h2><p>DOM加载完成，会触发DOMContentLoaded事件，等同于jQuery的$(document).ready方法。</p>
<pre><code>document.addEventListener(&quot;DOMContentLoaded&quot;, function() {
    // ...
});
</code></pre><h2 id="数据储存"><a href="#数据储存" class="headerlink" title="数据储存"></a>数据储存</h2><p>jQuery对象可以储存数据。</p>
<pre><code>$(&quot;body&quot;).data(&quot;foo&quot;, 52);
$(&quot;body&quot;).data(&quot;foo&quot;);
</code></pre><p>HTML 5有一个dataset对象，也有类似的功能（IE 10不支持），不过只能保存字符串。</p>
<pre><code>element.dataset.user = JSON.stringify(user);
element.dataset.score = score;
</code></pre><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>jQuery的animate方法，用于生成动画效果。</p>
<pre><code>$foo.animate(&#39;slow&#39;, { x: &#39;+=10px&#39; })
</code></pre><p>jQuery的动画效果，很大部分基于DOM。但是目前，CSS 3的动画远比DOM强大，所以可以把动画效果写进CSS，然后通过操作DOM元素的class，来展示动画。</p>
<pre><code>foo.classList.add(&#39;animate&#39;)
</code></pre><p>如果需要对动画使用回调函数，CSS 3也定义了相应的事件。</p>
<pre><code>el.addEventListener(&quot;webkitTransitionEnd&quot;, transitionEnded);
el.addEventListener(&quot;transitionend&quot;, transitionEnded);
</code></pre>]]></content>
      
        <categories>
            
            <category> 汇总篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css换行问题]]></title>
      <url>/2017/10/25/wordBreak/</url>
      <content type="html"><![CDATA[<p>css实现强制不换行/自动换行/强制换行</p>
<h2 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h2><p><strong>按单词自动换行</strong></p>
<blockquote>
<p>p { word-wrap:break-word; }</p>
</blockquote>
<p><strong>强制按英文字母断行</strong> <code>需要将行内元素设置为块级元素</code> </p>
<blockquote>
<p>p { word-break:break-all; }</p>
</blockquote>
<h2 id="强制不换行"><a href="#强制不换行" class="headerlink" title="强制不换行"></a>强制不换行</h2><p><strong>强制不换行</strong></p>
<blockquote>
<p>p { white-space:nowrap; }</p>
</blockquote>
<p><strong>超出显示省略号</strong></p>
<blockquote>
<p>p { white-space:nowrap; text-overflow:ellipsis; overflow:hidden; }</p>
<p>一定要给文字的父容器</p>
<p>如果父容器是行级，一定要转成块级（一定要是 block，设置为 inline-block 无效）</p>
</blockquote>
<p><strong>white-space: <code>normal</code> <code>pre</code> <code>nowrap</code> <code>pre-wrap</code> <code>pre-line</code> <code>inherit</code> ;</strong> </p>
<blockquote>
<p>white-space 属性设置如何处理元素内的空白 </p>
</blockquote>
<ul>
<li>normal 默认。多个空白或者多个换行将被当一个空白或一个换行处理- pre 空白和换行会被浏览器保留。其行为方式类似 HTML 中的 pre 标签- nowrap 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止- pre-wrap 保留空白符序列，但是正常地进行换行 - pre-line 合并空白符序列，但是保留换行符- inherit 规定应该从父元素继承 white-space 属性的值<br><strong>word-break: <code>normal</code> <code>break-all</code> <code>keep-all</code> ;</strong> <blockquote>
<p>word-break 属性用来标明怎么样进行单词内的断句</p>
</blockquote>
</li>
<li>normal：使用浏览器默认的换行规则- break-all:允许再单词内换行 - keep-all:只能在半角空格或连字符处换行</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 心得篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表头固定]]></title>
      <url>/2017/10/24/amazingTable/</url>
      <content type="html"><![CDATA[<p>table的表头固定 ——— 上下滚动表头固定，左右滚动表头跟随滚动</p>
<h2 id="关于表格固定"><a href="#关于表格固定" class="headerlink" title="关于表格固定"></a>关于表格固定</h2><p>如果数据不是很多，一般都是用两个表格，一个放thead，另一个放tbody，这个没难度就不再赘述了</p>
<p>如果数据很多就要考虑左右滚动的情况了</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>demo: <a href="http://jsrun.net/biiKp/show" target="_blank" rel="external">http://jsrun.net/biiKp/show</a></p>
<p>同样是两个table，一个放thead，另一个放tbody，用两个div分别包裹起来</p>
<p>这两个div依赖于他们的的父容器进行absolute定位</p>
<blockquote>
<p>theadDiv {</p>
<p> position: absolute;<br> left: 0;<br> right: 0;<br> overflow: hidden; //这里hidden是用于隐藏滚动条<br>}</p>
<p>tbodyDiv {</p>
<p> position: absolute;<br> top: 35px;<br> left: 0;<br> right: 0;<br> bottom: 0;<br> overflow: auto;<br>}</p>
</blockquote>
<p>给放置thead的div添加样式 <code>overflow: hidden;</code> ，表头不需要看到滚动条</p>
<p>给放置tbody的div添加样式 <code>overflow: auto;</code> ，表的主体需要滚动条</p>
<p>这时只需要在滚动下面的tbody时，同样滚动上面的thead就行</p>
<blockquote>
<p>$(‘#tbodyDiv’).on(‘scroll’, function () {</p>
<p>  $(“#theadDiv”).scrollLeft($(‘#tbodyDiv’).scrollLeft());</p>
<p>  });</p>
<p>})</p>
</blockquote>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>demo: <a href="http://jsrun.net/2iiKp/show" target="_blank" rel="external">http://jsrun.net/2iiKp/show</a></p>
<ol>
<li>大概思路就是  <code>容器A</code> 下面有 <code>容器1（放置thead）</code> 和 <code>容器2（放置tbody）</code></li>
<li>x轴滚动条属于 <code>容器A</code> ，滚动 <code>容器1（放置thead）</code> 和 <code>容器2（放置tbody）</code></li>
<li>y轴属于 <code>容器2</code> ，滚动 <code>tbody</code></li>
</ol>
<p>这个方法有缺陷，就是y轴的滚动条必须要当x轴滚到最右边才看得到，当然Mac下无差（Mac下的滚动条不滚动的时候是隐藏的，而win系统下就会影响美观，但都不影响操作，毕竟我们有鼠标滚轮）</p>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM]]></title>
      <url>/2017/10/21/DOM/</url>
      <content type="html"><![CDATA[<p>为什么我们要尽量少的去操作DOM结构？</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发的过程中，javascript极为重要的一个功能就是对DOM对象的操作，无论增删改查在前端页面操作这一范围内都是比较消耗性能的。如何高效率的，便捷的操作DOM，这就是本文要讲述的，希望看完全文，你能知道如何更高效的通过原生js以及jQuery操作DOM元素。</p>
<h2 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h2><ol>
<li>DOM修改导致的页面重绘<code>repaint</code>、重构<code>reflow</code>，重新排版是用户阻塞的操作，同时，如果频繁重排，CPU使用率也会猛涨</li>
<li>repaint意味着样式的改变比如div调整了背景色等，但是位置不变，只改变我们操作的元素</li>
<li>reflow意味着结构的改变，比如一堆元素堆叠，改变其中一个的宽高，那么相应的所有元素的位置都要改变</li>
<li>所以通常来看repaint的代价要远小于reflow，速度也更快</li>
</ol>
<h2 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h2><h3 id="能放到DOM操作之外的操作就放到外面，DOM操作要尽量少"><a href="#能放到DOM操作之外的操作就放到外面，DOM操作要尽量少" class="headerlink" title="能放到DOM操作之外的操作就放到外面，DOM操作要尽量少"></a>能放到DOM操作之外的操作就放到外面，DOM操作要尽量少</h3><p>这是一个不好的事例：</p>
<pre><code class="javascript">var $obj = $(&quot;#obj&quot;);
var data = [{&quot;id&quot;:0,&quot;name&quot;:&quot;a&quot;},{&quot;id&quot;:1,&quot;name&quot;:&quot;b&quot;}];
for (var i = 0; i &lt; data.length; i++) {
    $obj.append(&#39;&lt;option value=&quot;&#39;+data[i].id+&#39;&quot;&gt;&#39;+data[i].name+&#39;&lt;/option&gt;&#39;);
};
</code></pre>
<p>更好的做法，使用容器存放临时变更，最后再一次性更新DOM：</p>
<pre><code class="javascript">var $obj = $(&quot;#obj&quot;);
var data = [{&quot;id&quot;:0,&quot;name&quot;:&quot;a&quot;},{&quot;id&quot;:1,&quot;name&quot;:&quot;b&quot;}];
var tempStr = &quot;&quot;;
for (var i = 0; i &lt; data.length; i++) {
    tempStr +=(&#39;&lt;option value=&quot;&#39;+data[i].id+&#39;&quot;&gt;&#39;+data[i].name+&#39;&lt;/option&gt;&#39;);
};
$obj.html(tempStr);
</code></pre>
<h3 id="大范围操作先把容器隐藏，在其中操作完成后再显示"><a href="#大范围操作先把容器隐藏，在其中操作完成后再显示" class="headerlink" title="大范围操作先把容器隐藏，在其中操作完成后再显示"></a>大范围操作先把容器隐藏，在其中操作完成后再显示</h3><p>这个也算是优化的一种，这原理涉及到浏览器加载和渲染的原理,简单说就是隐藏的元素其中不会产生reflow</p>
<h3 id="样式操作不要注意修改属性，直接替换class"><a href="#样式操作不要注意修改属性，直接替换class" class="headerlink" title="样式操作不要注意修改属性，直接替换class"></a>样式操作不要注意修改属性，直接替换class</h3><p>这个还是比较容易理解的，你逐一修改要访问很多次，而替换class就相当于批量操作了，访问一次DOM就可以了,当然性能提高了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于性能方面，平时应注意积累。</p>
]]></content>
      
        <categories>
            
            <category> 心得篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
            <tag> DOM操作 </tag>
            
            <tag> 循环 </tag>
            
            <tag> 渲染 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文本框模糊查询]]></title>
      <url>/2017/10/21/input/</url>
      <content type="html"><![CDATA[<p>文本框模糊匹配(纯html+jquery简单实现) ，自己写的一个小组件。</p>
<h2 id="Demo链接"><a href="#Demo链接" class="headerlink" title="Demo链接"></a>Demo链接</h2><ul>
<li><a href="http://jsrun.net/NXiKp/show" target="_blank" rel="external">Demo</a></li>
<li><a href="http://jsrun.net/NXiKp/edit" target="_blank" rel="external">源码</a></li>
</ul>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol>
<li>引入<code>css</code>和<code>js</code>: <a href="http://jsrun.net/EXiKp.css" target="_blank" rel="external">http://jsrun.net/EXiKp.css</a> 和  <a href="http://jsrun.net/sXiKp.js" target="_blank" rel="external">http://jsrun.net/sXiKp.js</a> （点开链接拷到你的项目中）</li>
<li>给需要加模糊查询的input加上<code>class=&quot;filter_input&quot;</code>，id必需</li>
<li>getFilters(id, msg);（前面一个参数是input的id，后面一个参数是后台返的json字符串）</li>
</ol>
<h2 id="JS主要代码"><a href="#JS主要代码" class="headerlink" title="JS主要代码"></a>JS主要代码</h2><p><strong>创建需要的div包裹住文本框</strong></p>
<pre><code class="javascript">function wraps(){
  for(var i = 0 ; i&lt;$(&#39;.filter_input&#39;).length ; i++){
    var id = $(&#39;.filter_input&#39;).eq(i).attr(&#39;id&#39;);
    var $width = $(&#39;.filter_input&#39;).eq(i).css(&quot;width&quot;);
    $(&#39;#&#39; + id).wrap(&quot;&lt;div class=&#39;filter_wrap&#39; id=&#39;filter_wrap&quot;+id+&quot;&#39;&gt;&lt;/div&gt;&quot;);
  $(&#39;#&#39; + id).after(&quot;&lt;div style=\&quot;width:&quot; + $width + &quot;;\&quot; class=&#39;filter_case&#39; id=&#39;filter_&quot; + id + &quot;&#39;&gt;&lt;/div&gt;&lt;span class=&#39;arrowTip&#39;&gt;▼&lt;/span&gt;&quot;);
  } 
}
</code></pre>
<p><strong>根据后台返回的数据加载数据</strong></p>
<pre><code class="javascript">function getFilters(id,msg){
  var html = &quot;&quot;;
    $.each(eval(msg), function (i, n) {
      for(key in n){
        html += &quot;&lt;div onclick=\&quot;inme(&#39;&quot; + n[key] + &quot;&#39;)\&quot;  class=\&quot;div_item\&quot;&gt;&quot; + n[key] + &quot;&lt;/div&gt;&quot;;
      };
    });
  $(&#39;#filter_&#39;+id).html(html);
  $(&#39;#filter_&#39;+id).append(&quot;&lt;div onclick=&#39;NothingClick()&#39; class=\&quot;Nothing\&quot;&gt;无匹配项&lt;/div&gt;&quot;);
}
</code></pre>
<p><strong>弹出列表框</strong></p>
<pre><code class="javascript">$(&quot;.filter_input&quot;).click(function() {
  $(&quot;.arrowTip&quot;).text(&quot;▼&quot;);
  $(&quot;.filter_case&quot;).hide();
  $(&quot;#filter_&quot; + this.id).show();
  $(&quot;#filter_&quot; + this.id).next().text(&quot;▲&quot;);
  return false;
});
</code></pre>
<p><strong>监听文本框输入</strong></p>
<pre><code class="javascript">$(&quot;.filter_input&quot;).keyup(function() {
  $(&quot;#filter_&quot; + this.id).show(); //只要输入就显示列表框 
  if ($(&quot;#&quot;+ this.id).val().length &lt;= 0) {
    $(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).show(); //如果什么都没填，跳出，保持全部显示状态  
    return;
  }
  $(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).hide(); //如果填了，先将所有的选项隐藏  
  var num=0;
  for (var i = 0; i &lt; $(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).length; i++) {
    //模糊匹配，将所有匹配项显示  
    if ($(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).eq(i).text().toLowerCase().indexOf($(&quot;#&quot; + this.id).val().toLowerCase()) &gt;= 0) {
      num++;
      $(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).eq(i).show();
      $(&#39;.Nothing&#39;).hide();
    }
  }
  if(num==0){
    $(&#39;.Nothing&#39;).show();
  }
});
</code></pre>
<p><strong>模糊项的点击</strong></p>
<pre><code class="javascript">function inme(name) {
   var event = event? event: window.event;      
    var srcObj = ((event.srcElement)?event.srcElement:event.target);       
  $(srcObj).parent().prev().val(name);
};
</code></pre>
<p><strong>点击无匹配</strong></p>
<pre><code class="javascript">function NothingClick(){
  var event = event? event: window.event;      
    var srcObj = ((event.srcElement)?event.srcElement:event.target);   
  $(srcObj).parent().prev().val(&quot;&quot;);
  $(&#39;.Nothing&#39;).hide();
  $(&quot;.filter_case&quot;).hide();
  $(&quot;.div_item&quot;).show();
}
</code></pre>
<p><strong>隐藏列表框</strong></p>
<pre><code class="javascript">$(&quot;body&quot;).click(function() {
  $(&quot;.filter_case&quot;).hide();
  $(&quot;.arrowTip&quot;).text(&quot;▼&quot;);
});
</code></pre>
<h2 id="CSS主要代码"><a href="#CSS主要代码" class="headerlink" title="CSS主要代码"></a>CSS主要代码</h2><pre><code class="css">.filter_wrap{
  display:inline-block;
  position:relative;
}
.arrowTip{
  position:absolute;
  right:5px;
  top:4px;
  color:#c2c2c2;
  font-size:13px;
}
.Nothing{
  height: 30px;
  width: 260px;
  line-height: 30px;
  font-size: 14px;
  text-align:center;
  color:#999;
  display:none;
  cursor:pointer;
}
.filter_case {
  padding:4px 0px 4px 0px;
  position: absolute;
  z-index: 100;
  height:auto;
  max-height: 200px;
  border: 1px solid #999;
  box-sizing:border-box;
  overflow-x: hidden;
  display: none;
  background-color: white;
  margin-top:3px;
  box-shadow: 0 4px 6px rgba(0,0,0,.24);
  border-radius: 2px;
}

.div_item {
  text-indent: 8px;
  height: 30px;
  width: 260px;
  white-space: nowrap;
  line-height: 30px;
  font-size: 13px;
}

.div_item:hover {
  cursor: pointer;
  background-color: #1C86EE;
  color: white;
}
input {
  text-indent: 8px;
  box-sizing:border-box;
  outline: none;
  border:1px solid #999 !important;
  text-indent: 8px;
  height: 30px;
  width: 258px;
  box-sizing:border-box;
  -moz-box-sizing:border-box; /* Firefox */
  -webkit-box-sizing:border-box; /* Safari */
  outline: none;
  border-radius: 2px;
}
</code></pre>
<h2 id="html和CSS部分的一些细节"><a href="#html和CSS部分的一些细节" class="headerlink" title="html和CSS部分的一些细节"></a>html和CSS部分的一些细节</h2><ol>
<li><blockquote>
<p>outline: none;  </p>
<p>outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，为了美观应该去掉</p>
</blockquote>
</li>
<li><blockquote>
<p>box-sizing:border-box;</p>
<p>这可令浏览器呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。</p>
</blockquote>
</li>
<li><blockquote>
<p>autocomplete=”off”</p>
<p>autocomplete是form表单的属性，默认为on，其含义代表是否让浏览器自动记录之前输入的值，应该关闭记录</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常问题整理]]></title>
      <url>/2017/10/21/dailySummary/</url>
      <content type="html"><![CDATA[<p>记录每天学到的知识点或者遇到的问题</p>
<h2 id="从数组里随机取一项"><a href="#从数组里随机取一项" class="headerlink" title="从数组里随机取一项"></a>从数组里随机取一项</h2><pre><code class="javascript">arr[Math.floor(Math.random()*arr.length)]
</code></pre>
<h2 id="阻止浏览器默认的右键点击事件"><a href="#阻止浏览器默认的右键点击事件" class="headerlink" title="阻止浏览器默认的右键点击事件"></a>阻止浏览器默认的右键点击事件</h2><pre><code class="javascript">window.document.oncontextmenu = function () {
return false;
}
</code></pre>
<h2 id="左击右击事件"><a href="#左击右击事件" class="headerlink" title="左击右击事件"></a>左击右击事件</h2><pre><code class="javascript">function clickMe() {
var event = event ? event : window.event;
if (1 == event.which) {
//左击
}
if (3 == event.which) {
//右击
}
}
</code></pre>
<h2 id="循环时候去掉最后一个逗号"><a href="#循环时候去掉最后一个逗号" class="headerlink" title="循环时候去掉最后一个逗号"></a>循环时候去掉最后一个逗号</h2><pre><code class="javascript">var json = eval(msg), arr = [];
for (var k in json[0]) {
arr.push(k + &quot;：&quot; + json[0][k] + &quot;条&quot;);
}
$(&#39;#dataNum&#39;).html(arr.join(&#39;，&#39;));
</code></pre>
<h2 id="判断是否存在id为item元素"><a href="#判断是否存在id为item元素" class="headerlink" title="判断是否存在id为item元素"></a>判断是否存在id为item元素</h2><pre><code class="javascript">if($(&#39;#item&#39;).length!=0){//因为jquery获取的元素是一个集合，看长度是否为0就可以知道是不是存在
//有元素
}else{
//没有元素
}
</code></pre>
<h2 id="生成区间随机数"><a href="#生成区间随机数" class="headerlink" title="生成区间随机数"></a>生成区间随机数</h2><pre><code class="javascript">function getRandom(m,n){
return Math.floor(Math.random()*(n-m+1)+m)
}
</code></pre>
<h2 id="小数转为百分数"><a href="#小数转为百分数" class="headerlink" title="小数转为百分数"></a>小数转为百分数</h2><pre><code class="javascript">Number(point*100).toFixed(2)+&quot;%&quot;;
</code></pre>
<h2 id="trim-去掉前后空白"><a href="#trim-去掉前后空白" class="headerlink" title="trim() 去掉前后空白"></a>trim() 去掉前后空白</h2><pre><code class="javascript">//去左空格;
function ltrim(s){
return s.replace(/(^\s*)/g, &quot;&quot;);
}
//去右空格;
function rtrim(s){
return s.replace(/(\s*$)/g, &quot;&quot;);
}
//去左右空格;
function trim(s){
return s.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);
}
</code></pre>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><pre><code class="javascript">function QuChong(arr){
var newArr =[];
for(i in arr){
if(!newArr.includes(arr[i])){
newArr.push(arr[i]);
}
}
return newArr;
}
</code></pre>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><pre><code class="javascript">reverse();用于翻转数组，该方法会改变原来的数组，而不会创建新的数组。
</code></pre>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><pre><code class="javascript">function sortNumber(a,b)
{
return a - b;//升序
//return b - a;//倒序 或者升序之后用 reverse() 翻转数组
}
arr.sort(sortNumber);
</code></pre>
<h2 id="找出元素-item-在给定数组-arr-中的位置"><a href="#找出元素-item-在给定数组-arr-中的位置" class="headerlink" title="找出元素 item 在给定数组 arr 中的位置"></a>找出元素 item 在给定数组 arr 中的位置</h2><pre><code class="javascript">function indexOf(arr, item) {
return arr.indexOf(item)
}
</code></pre>
<h2 id="计算给定数组-arr-中所有元素的总和"><a href="#计算给定数组-arr-中所有元素的总和" class="headerlink" title="计算给定数组 arr 中所有元素的总和"></a>计算给定数组 arr 中所有元素的总和</h2><pre><code class="javascript">计算给定数组 arr 中所有元素的总和
function sum(arr) {
var hehe=0;
for(e in arr){
hehe += arr[e];
}
return hehe;
}
function sum(arr) {
return eval(arr.join(&#39;+&#39;));
}
</code></pre>
<h2 id="移除数组-arr-中的所有值与-item-相等的元素"><a href="#移除数组-arr-中的所有值与-item-相等的元素" class="headerlink" title="移除数组 arr 中的所有值与 item 相等的元素"></a>移除数组 arr 中的所有值与 item 相等的元素</h2><pre><code class="javascript">移除数组 arr 中的所有值与 item 相等的元素。不要直接修改数组 arr，结果返回新的数组
function remove(arr, item) {
var arr2 =[];
for(e in arr){
if(arr[e] != item){
arr2.push(arr[e]);
}
}
return arr2;
}
function remove(arr, item) {
var newArr = arr.slice(0);
while(newArr.indexOf(item)!=-1){
newArr.splice(newArr.indexOf(item),1);
}
return newArr;
}
</code></pre>
<h2 id="在数组-arr-末尾添加元素-item"><a href="#在数组-arr-末尾添加元素-item" class="headerlink" title="在数组 arr 末尾添加元素 item"></a>在数组 arr 末尾添加元素 item</h2><pre><code class="javascript">在数组 arr 末尾添加元素 item。不要直接修改数组 arr，结果返回新的数组
function append(arr, item) {
return arr.concat([item]);
}
function append(arr, item) {
var newArr = arr.slice(0);
return newArr.push(item);
}
</code></pre>
<h2 id="删除数组-arr-最后一个元素"><a href="#删除数组-arr-最后一个元素" class="headerlink" title="删除数组 arr 最后一个元素"></a>删除数组 arr 最后一个元素</h2><pre><code class="javascript">删除数组 arr 最后一个元素。不要直接修改数组 arr，结果返回新的数组
function truncate(arr) {
var newArr = arr.slice(0);
newArr.pop();
//newArr.splice(newArr.length-1,1);
//newArr.splice(newArr.length-1);
return newArr;
}
</code></pre>
<h2 id="在数组-arr-开头添加元素-item"><a href="#在数组-arr-开头添加元素-item" class="headerlink" title="在数组 arr 开头添加元素 item"></a>在数组 arr 开头添加元素 item</h2><pre><code class="javascript">在数组 arr 开头添加元素 item。不要直接修改数组 arr，结果返回新的数组
function prepend(arr, item) {
return [item].concat(arr);
}
function prepend(arr, item) {
var newArr = arr.slice(0);
newArr.unshift(item);
return newArr;
}
</code></pre>
<h2 id="删除数组-arr-第一个元素"><a href="#删除数组-arr-第一个元素" class="headerlink" title="删除数组 arr 第一个元素"></a>删除数组 arr 第一个元素</h2><pre><code class="javascript">删除数组 arr 第一个元素。不要直接修改数组 arr，结果返回新的数组
function curtail(arr) {
return arr.slice(1);
}
</code></pre>
<h2 id="合并数组-arr1-和数组-arr2"><a href="#合并数组-arr1-和数组-arr2" class="headerlink" title="合并数组 arr1 和数组 arr2"></a>合并数组 arr1 和数组 arr2</h2><pre><code class="javascript">合并数组 arr1 和数组 arr2。不要直接修改数组 arr，结果返回新的数组
function concat(arr1, arr2) {
return arr1.concat(arr2);
}
</code></pre>
<h2 id="在数组-arr-的-index-处添加元素-item"><a href="#在数组-arr-的-index-处添加元素-item" class="headerlink" title="在数组 arr 的 index 处添加元素 item"></a>在数组 arr 的 index 处添加元素 item</h2><pre><code class="javascript">在数组 arr 的 index 处添加元素 item。不要直接修改数组 arr，结果返回新的数组
function insert(arr, item, index) {
var newArr = arr.slice(0);
newArr.splice(index,0,item);
return newArr;
}
</code></pre>
<h2 id="统计数组-arr-中值等于-item-的元素出现的次数"><a href="#统计数组-arr-中值等于-item-的元素出现的次数" class="headerlink" title="统计数组 arr 中值等于 item 的元素出现的次数"></a>统计数组 arr 中值等于 item 的元素出现的次数</h2><pre><code class="javascript">统计数组 arr 中值等于 item 的元素出现的次数
function count(arr, item) {
var c=0;
for(e in arr){
if(arr[e]==item){
c++;
}
}
return c;
}
</code></pre>
<h2 id="生成m到n的区间随机数"><a href="#生成m到n的区间随机数" class="headerlink" title="生成m到n的区间随机数"></a>生成m到n的区间随机数</h2><pre><code class="javascript">生成m到n的区间随机数
function getRand(m, n) {
var random = Math.floor(Math.random() * (n - m + 1) + m);
return random;
}
</code></pre>
<h2 id="检查数组里是否包含了某值"><a href="#检查数组里是否包含了某值" class="headerlink" title="检查数组里是否包含了某值"></a>检查数组里是否包含了某值</h2><pre><code class="javascript">检查数组里是否包含了某值
arr.includes(item);//结果返回true和false
</code></pre>
<h2 id="编写一个javscript函数-fn"><a href="#编写一个javscript函数-fn" class="headerlink" title="编写一个javscript函数 fn"></a>编写一个javscript函数 fn</h2><pre><code class="javascript">编写一个javscript函数 fn，该函数有一个参数 n(数字类型)，其返回值是一个数组，该数组内是 n 个随机且不重复的整数，且整数取值范围是 [2, 32]。
//fn函数
function fn(n) {
var arr = [];
for (var i = 0; i &lt; n; i++) {
var rnd = getRand(2, 32);
if (arr.includes(rnd)) {
i--;//减一是因为如果第i次循环的时候如果数组有了改值，就重新走一遍
} else {
arr.push(rnd);
}
}
return arr;
}
//生成区间随机数
function getRand(m, n) {
var random = Math.floor(Math.random() * (n - m + 1) + m);
return random;
}
//检查是否重复,这里直接用了 arr.includes(e)
function checkInArr(e,arr){
if(arr.indexOf(e)==-1){
return false;
}
return true;
}
//console.log(fn(5));
</code></pre>
<h2 id="打乱一个数组"><a href="#打乱一个数组" class="headerlink" title="打乱一个数组"></a>打乱一个数组</h2><pre><code class="javascript">randomArr.sort(function () { return Math.random() &gt; 0.5 ? -1 : 1; });
</code></pre>
<h2 id="动态添加行"><a href="#动态添加行" class="headerlink" title="动态添加行"></a>动态添加行</h2><pre><code class="javascript">function AddRow(json) {
//json: [{&quot;OperatorNum&quot;:&quot;8000011&quot;,&quot;TollT&quot;:1,&quot;TollY&quot;:2,&quot;TollS&quot;:3,&quot;TollC&quot;:4,&quot;ArrearageNum&quot;:5,&quot;ArrearageToll&quot;:6,&quot;AddNum&quot;:7,&quot;AddToll&quot;:8},{&quot;OperatorNum&quot;:&quot;总计&quot;,&quot;TollT&quot;:1,&quot;TollY&quot;:2,&quot;TollS&quot;:3,&quot;TollC&quot;:4,&quot;ArrearageNum&quot;:5,&quot;ArrearageToll&quot;:6,&quot;AddNum&quot;:7,&quot;AddToll&quot;:8}]
$(&#39;#tbody&#39;).html(&#39;&#39;);
for (key in json) {
var _tr = $(&quot;&lt;tr&gt;&lt;/tr&gt;&quot;);
for (var k in json[key]) {
var _td = $(&quot;&lt;td&gt;&quot; + json[key][k] + &quot;&lt;/td&gt;&quot;);
_tr.append(_td);
}
$(&#39;#tbody&#39;).append(_tr);
}
}
</code></pre>
<h2 id="a标签的一些用法"><a href="#a标签的一些用法" class="headerlink" title="a标签的一些用法"></a>a标签的一些用法</h2><pre><code class="javascript">&lt;a href=&quot;javascript:void(alert(&#39;Warning!!!&#39;))&quot;&gt;点我弹窗&lt;/a&gt;
&lt;a href=&quot;javascript:void(0)&quot;&gt;点我没效果&lt;/a&gt;
&lt;a href=&quot;#pos&quot;&gt;点我定位到指定位置&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;点我定位到顶部&lt;/a&gt;
</code></pre>
<h2 id="计算给定数组-arr-中所有元素的总和-1"><a href="#计算给定数组-arr-中所有元素的总和-1" class="headerlink" title="计算给定数组 arr 中所有元素的总和"></a>计算给定数组 arr 中所有元素的总和</h2><pre><code class="javascript">//一般的方法
function sum(arr) {
var sum = 0;
for(var i =0;i&lt;arr.length;i++){
sum = sum +arr[i];
}
return sum;
}
//或者可以这样
function sum(arr) {
return eval(arr.join(&quot;+&quot;))
}
</code></pre>
<h2 id="checkbox的一些用法"><a href="#checkbox的一些用法" class="headerlink" title="checkbox的一些用法"></a>checkbox的一些用法</h2><pre><code class="javascript">$(&quot;input[name=&#39;WeiZhi&#39;]&quot;);  //选取name为xx的元素
$(&quot;input[type=&#39;checkbox&#39;]&quot;).prop(&#39;checked&#39;,true);  //设置checkbox选中
$(&quot;input[type=&#39;checkbox&#39;]&quot;).attr(&#39;checked&#39;);  //两种结果 &quot;checked&quot;和undefined，注意引号！
$(&quot;input[name=&#39;WeiZhi&#39;]:checked&quot;).length;  // 选中的个数
</code></pre>
<h2 id="小数转百分数"><a href="#小数转百分数" class="headerlink" title="小数转百分数"></a>小数转百分数</h2><pre><code class="javascript">function toPercent(point) {
return Number(point * 100).toFixed(2) + &quot;%&quot;;//保留2位小数
}
</code></pre>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><pre><code class="javascript">.clearfix:after, {
content: &quot;.&quot;;
display: block;
height: 0;
clear: both;
visibility: hidden;
}
</code></pre>
<h2 id="获取事件源"><a href="#获取事件源" class="headerlink" title="获取事件源"></a>获取事件源</h2><pre><code class="javascript">function test(){
var event = event? event: window.event;
var srcObj = ((event.srcElement)?event.srcElement:event.target);
alert($(srcObj));
}
</code></pre>
<h2 id="阻止页面的表单元素自动联想填满"><a href="#阻止页面的表单元素自动联想填满" class="headerlink" title="阻止页面的表单元素自动联想填满"></a>阻止页面的表单元素自动联想填满</h2><pre><code class="javascript">&lt;form id=&quot;Content&quot; autocomplete=&quot;off&quot;&gt;
autocomplete=&quot;off&quot;用来阻止浏览器自动填充（联想）
</code></pre>
<h2 id="动态创建table"><a href="#动态创建table" class="headerlink" title="动态创建table"></a>动态创建table</h2><pre><code class="javascript">var json = eval(msg);
var tab = &quot;&quot;;
if (json.length &gt; 0) {
$.each(json, function (i, n) {
var num = i + 1;
tab += &quot;
&lt;tr&gt;
    &lt;td style=&#39;text-align:center;&#39;&gt;&quot; + num + &quot;&lt;/td&gt;
    &lt;td&gt;&quot; + n.NianFen + &quot;&lt;/td&gt;
    &lt;td&gt;&quot; + n.YueFen + &quot;&lt;/td&gt;
    &lt;td&gt;&quot; + n.SFZName + &quot;&lt;/td&gt;
    &lt;td&gt;&quot; + n.DFNum + &quot;&lt;/td&gt;
    &lt;td&gt;&quot; + n.PJF + &quot;&lt;/td&gt;
    &lt;td&gt;&quot; + n.ZongFenShu + &quot;&lt;/td&gt;
    &lt;td&gt;&quot; + n.RenShu + &quot;&lt;/td&gt;
&lt;/tr&gt;&quot;;
})
$(&quot;#tbody&quot;).html(tab);
}
</code></pre>
<h2 id="查看的绑定"><a href="#查看的绑定" class="headerlink" title="查看的绑定"></a>查看的绑定</h2><pre><code class="javascript">var json = eval(msg);
if (json.length &gt; 0) {
for (var key in json[0]) {
$(&quot;#&quot; + key).text(json[0][key]);
}
}
</code></pre>
<h2 id="让input只能输入正整数"><a href="#让input只能输入正整数" class="headerlink" title="让input只能输入正整数"></a>让input只能输入正整数</h2><pre><code class="javascript">&lt;input type=&quot;text&quot; onkeyup=&quot;this.value=this.value.replace(/\D/g,&#39;&#39;)&quot;
注意：一般在JS中拼接的时候 符号 \  会被视为转义字符，最后页面显示的是.replace(/D/g,&#39;&#39;)&quot; 。 所以在JS拼接时可以这样：.replace(/\\D/g,&#39;&#39;)&quot;
</code></pre>
<h2 id="自适应屏幕大小"><a href="#自适应屏幕大小" class="headerlink" title="自适应屏幕大小"></a>自适应屏幕大小</h2><pre><code class="javascript">document.getElementById(&#39;InforList&#39;).style.width = document.body.clientWidth * 0.90 + &quot;px&quot;;
document.getElementById(&#39;InforList&#39;).style.height = window.innerHeight * 0.75 + &quot;px&quot;;
</code></pre>
<h2 id="获取选中的下拉列表的value和text"><a href="#获取选中的下拉列表的value和text" class="headerlink" title="获取选中的下拉列表的value和text"></a>获取选中的下拉列表的value和text</h2><pre><code class="javascript">var index = $(&#39;#HuoJia&#39;)[0].selectedIndex; // 选中索引
var HuoJia = $(&#39;#HuoJia&#39;)[0].options[index].text; // 选中文本
$(&quot;#HuoJia&quot;).find(&quot;option:selected&quot;).text() //简洁
</code></pre>
<h2 id="join-split-splice-substring的区别"><a href="#join-split-splice-substring的区别" class="headerlink" title="join, split, splice, substring的区别"></a>join, split, splice, substring的区别</h2><pre><code class="javascript">join(&#39;,&#39;)是将数组用逗号隔开，转化为字符串
split(&#39;-&#39;)是以字符串中的-符号转化为数组
splice(3,1)是返回 从下标索引为3的位置切割出长度为1的字符
str.substring(3,5)是截取两个指定下标位置的字符串，这个是下标为3和5的位置
</code></pre>
<h2 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h2><pre><code class="javascript">在写侧边栏点击变色的时候可以选择为li的点击事件加上addClass(&#39;active&#39;)和removeClass(&#39;active&#39;),但是在样式表里你不能直接写.active的样式
注意看看之前有没有写过li的样式，比如你点击的这个li上级的class为.side，假如之前写过.side&gt;li{ background-color:red; }的样式，点击虽然可以为li加上class，但是
.active{ background-color:black; }的样式不能体现，这时候这样写就行了.side&gt;.active{ background-color:black; }，因为子元素选择器的权重比较高，会覆盖其他单独class的样式
</code></pre>
<h2 id="背景图片充满屏幕"><a href="#背景图片充满屏幕" class="headerlink" title="背景图片充满屏幕"></a>背景图片充满屏幕</h2><pre><code class="javascript">/*背景图片充满屏幕的时候可以这样避免图片大小的因素*/
&lt;div style=&quot;position: absolute; width: 100%; height: 100%; z-index: -1&quot;&gt;
    &lt;img id=&quot;bgcolor&quot; style=&quot;position: fixed;&quot; src=&quot;~/Images/icon_login02.jpg&quot; width=&quot;100%&quot;/&gt;
&lt;/div&gt;
background: linear-gradient(#24a8e6, #44a9dc, #6bc5ec);/*渐变色。注意是background,不是background-color*/
</code></pre>
<h2 id="隐藏侧边导航的滚动条"><a href="#隐藏侧边导航的滚动条" class="headerlink" title="隐藏侧边导航的滚动条"></a>隐藏侧边导航的滚动条</h2><pre><code class="javascript">::-webkit-scrollbar{width:0px;} /*隐藏侧边导航的滚动条，只支持webkit内核的浏览器*/
</code></pre>
<h2 id="常用的返回上一页方法"><a href="#常用的返回上一页方法" class="headerlink" title="常用的返回上一页方法"></a>常用的返回上一页方法</h2><pre><code class="javascript">window.location.href = &quot;/XXX/XXX&quot;;
window.location.href = document.referrer;
history.back(-1);
window.history.back();
history.go(-1);
</code></pre>
<h2 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h2><pre><code class="javascript">$(window).scroll(function () {
var scrollt = document.documentElement.scrollTop + document.body.scrollTop;
if ( scrollt &gt; 700 ){
$(&quot;.to-top&quot;).fadeIn(500);
} else {
$(&quot;.to-top&quot;).fadeOut(500);
}
});

$(&quot;.to-top&quot;).click(function(){
$(&quot;html,body&quot;).animate({scrollTop: 0}, 1000);
});
</code></pre>
<h2 id="防止用户选中文字"><a href="#防止用户选中文字" class="headerlink" title="防止用户选中文字"></a>防止用户选中文字</h2><pre><code class="javascript">onselectstart：return false;
-webkit-user-select:none;
</code></pre>
<h2 id="阴影和背景渐变色"><a href="#阴影和背景渐变色" class="headerlink" title="阴影和背景渐变色"></a>阴影和背景渐变色</h2><pre><code class="javascript">阴影：
div{box-shadow: 10px 10px 5px #888888;}
背景渐变色：
background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(white), to(#cdcdcd));
</code></pre>
<h2 id="悬浮放大"><a href="#悬浮放大" class="headerlink" title="悬浮放大"></a>悬浮放大</h2><pre><code class="javascript">.newSongBody div img,.singerBody div img{
transition: transform 0.7s ;
}
.newSongBody div:hover img,.singerBody div:hover img {
transform: scale(1.08,1.08);
}
</code></pre>
<h2 id="超出div的部分省略号："><a href="#超出div的部分省略号：" class="headerlink" title="超出div的部分省略号："></a>超出div的部分省略号：</h2><pre><code class="javascript">.resourceDiv{
width:80px;
height:80px;
overflow:hidden;
white-space:nowrap;
text-overflow:ellipsis;
display:block;
}
</code></pre>
<h2 id="enter键代替按钮点击"><a href="#enter键代替按钮点击" class="headerlink" title="enter键代替按钮点击"></a>enter键代替按钮点击</h2><pre><code class="javascript">document.onkeydown = function (event) {
var e = event || window.event || arguments.callee.caller.arguments[0];
if (e &amp;&amp; e.keyCode == 13) { // enter 键
Login();
}
}
</code></pre>
]]></content>
      
        <categories>
            
            <category> 汇总篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Mac下通过Hexo在Github上搭建博客（入门篇）]]></title>
      <url>/2017/10/20/hexoBlog/</url>
      <content type="html"><![CDATA[<p>Hexo 快速，简洁且高效的博客框架，让上百个页面在几秒内瞬间完成渲染。Hexo支持Github Flavored Markdown的所有功能，甚至可以整合Octopress的大多数插件，并自己也拥有强大的插件系统。</p>
<p><code>Hexo</code> <code>github</code> <code>Node.js</code> <code>Git</code> <code>markdown</code> <code>themes</code> <code>bash命令</code> <code>npm</code> <code>SSH</code></p>
<h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是<a href="https://hexo.io/docs/index.html" target="_blank" rel="external">Hexo</a>？</h2><ul>
<li>Hexo 是一个快速、简洁且高效的博客框架。</li>
<li>Hexo 使用 <a href="https://baike.baidu.com/item/markdown" target="_blank" rel="external">Markdown</a>（或其他渲染引擎，之后会解释什么是Markdown）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>
</ul>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p><strong>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</strong></p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> （安装Recommended For Most Users那个版本）</li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Git</a></li>
</ul>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><strong>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</strong><br>命令就是你的Launchpad里叫 <code>终端</code> 的app，相当于win的cmd<br>以下出现的$都不是命令的一部分</p>
<blockquote>
<p>$ npm install -g hexo-cli<br>全局安装 hexo 模块，</p>
<p>如果下面的操作报错则需要卸载 hexo：<br>$ npm uninstall hexo</p>
<p>再重新安装 hexo：<br>$ sudo npm install -g hexo<br>输入管理员密码（Mac登录密码）即开始安装</p>
</blockquote>
<h2 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h2><p><strong>初始化, 在指定目录中创建文件目录，以 blog 为例：</strong></p>
<blockquote>
<p>$ hexo init blog</p>
</blockquote>
<p><strong>blog是你建立的文件夹名称，cd到blog文件夹下，安装npm：</strong></p>
<blockquote>
<p>$ cd blog</p>
<p>$ npm install</p>
</blockquote>
<h2 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h2><p><strong>以创建博客 firstBlog为例，标题中包含空格需要用引号将标题引起来</strong></p>
<blockquote>
<p>$ hexo new firstBlog<br>执行该命令后在<code>source/_posts</code>目录下生成文件</p>
</blockquote>
<h2 id="生成博客页面"><a href="#生成博客页面" class="headerlink" title="生成博客页面"></a>生成博客页面</h2><blockquote>
<p>$ hexo generate<br>执行该命令后会生成<code>public</code>目录</p>
<p>$ hexo sever<br>执行命令后启动服务，访问<code>http://localhost:4000/</code>可查看博客</p>
</blockquote>
<p><strong>注意</strong>：</p>
<ul>
<li>之后每次修改完你的博客或者配置内容，都需要用$ hexo sever来开启hexo服务器预览</li>
<li>按 Ctrl+C 停止服务器，以便于进行其他操作</li>
</ul>
<h2 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h2><p>在进行这一步时你需要一个github账号，到 <a href="https://github.com/" target="_blank" rel="external">github官网</a> 用邮箱注册就行，名字尽量简短有意义，我的github地址：<a href="https://github.com/zc95" target="_blank" rel="external">https://github.com/zc95</a></p>
<p>创建仓库登录你的Github帐号，新建仓库，一定要是名为 <code>用户名.github.io</code> 的固定写法（如 <code>zc95.github.io</code> ），我的仓库地址：<a href="https://github.com/zc95/zc95.github.io" target="_blank" rel="external">https://github.com/zc95/zc95.github.io</a></p>
<h2 id="上传到-github"><a href="#上传到-github" class="headerlink" title="上传到 github"></a>上传到 github</h2><p><strong>首次使用配置：</strong></p>
<blockquote>
<p>$ npm install hexo-deplorer-git –save<br>安装 <code>hexo-deplorer-git</code></p>
</blockquote>
<p>打开新建的blog文件夹，找到 <code>_config.yml</code> 配置文件，用记事本打开，Ctrl+F来搜索deploy，type改为git，repository改为你自己的仓库地址，在配置博客站点的_config.yml文件时（包括theme主题站点中的_config.yml），在所有的冒号: 后边都要加一个空格，否则执行hexo命令会报错，切记 切记</p>
<blockquote>
<p>deploy:<br>type: git<br>repository: <code>你的仓库地址</code><br>branch: master</p>
</blockquote>
<p>ok，可以尽情装逼了。。。</p>
<blockquote>
<p>hexo g == hexo generate #生成页面文件</p>
<p>hexo s == hexo server #启动服务预览</p>
<p>hexo d == hexo deploy # 部署到GitHub</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>git clone #克隆主题时用到</p>
<p>cd blog #进入blog文件夹</p>
<p>hexo n “我的博客” == hexo new “我的博客” #新建文章</p>
<p>hexo clean  #清除缓存 网页正常情况下可以忽略此条命令  </p>
<p>hexo g == hexo generate #生成</p>
<p>hexo s == hexo server #启动服务预览</p>
<p>hexo d == hexo deploy # 部署</p>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d #你应该看得懂…</p>
</blockquote>
<h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><pre><code class="javascript">var author = { 
  Name  : &quot;张成&quot;,
  Blog : &quot;http://zc95.github.io&quot;
}
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> Node.js </tag>
            
            <tag> markdown </tag>
            
            <tag> npm </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>

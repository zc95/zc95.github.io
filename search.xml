<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Node.js构建TCP服务器]]></title>
      <url>/2018/03/20/nodejs-TCP/</url>
      <content type="html"><![CDATA[<p>网络是通信互联网的基础，Node.js提供了net、http、dgram模块、分别用来实现TCP、HTTP、UDP的通信。上次的文章<a href="https://zc95.github.io/2018/03/19/nodejs-HTTP/">《Node.js构建HTTP服务器》</a>实现了HTTP的通信，这篇文章说一说TCP服务器的构建。</p>
<h2 id="用Node-js创建TCP服务器"><a href="#用Node-js创建TCP服务器" class="headerlink" title="用Node.js创建TCP服务器"></a>用Node.js创建TCP服务器</h2><p>为了使用Node.js创建TCP服务器，首先要使用require(“net”)来加载net模块，然后使用net模块的createServer方法就可以轻松地创建一个TCP服务器。<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 构建TCP客户端</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/* 引入net模块 */</span></div><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 创建TCP服务器 */</span></div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'someone connects'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/* 设置连接的服务器 */</span></div><div class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Creat server on http://127.0.0.1:8000/"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>运行这段代码并访问了<a href="http://127.0.0.1:8000/" target="_blank" rel="external">http://127.0.0.1:8000/</a>的话会看到控制台打印了”someone connects”，表面已经成功连接到这个创建的TCP服务器。</p>
<hr>
<blockquote>
<p>/<em> 设置连接的服务器 </em>/<br>server.listen(8000, function(){<br>​    console.log(“Creat server on <a href="http://127.0.0.1:8000/" target="_blank" rel="external">http://127.0.0.1:8000/</a>“);<br>})</p>
</blockquote>
<p>上面这段代码实际上触发的是server下的listening事件，等同于：</p>
<blockquote>
<p>/<em> 设置监听端口 </em>/</p>
<p>server.listen(8000);</p>
<p>/<em> 设置监听时的回调函数 </em>/</p>
<p>server.on(“listening”, function () {</p>
<p>​    console.log(“Creat server on <a href="http://127.0.0.1:8000/" target="_blank" rel="external">http://127.0.0.1:8000/</a>“);</p>
<p>})</p>
</blockquote>
<p>事实上，除了listening事件外，TCP服务器还支持以下事件：</p>
<ol>
<li>connection：当有新的连接创建时触发，回调函数的参数为socket连接对象。</li>
<li>close：TCP服务器关闭的时候触发，回调函数没有参数</li>
<li>error：TCP服务器发生错误的时候触发，回调函数的参数为error对象</li>
</ol>
<p>下列代码通过net.Server类来创建一个TCP服务器，并添加以上事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment"> * 通过net.Server类来创建一个TCP服务器</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/* 引入net模块 */</span></div><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 实例化一个服务器对象 */</span></div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> net.Server();</div><div class="line"></div><div class="line"><span class="comment">/* 监听 connection 事件 */</span></div><div class="line">server.on(<span class="string">"connection"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"someone connects"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* 设置监听端口 */</span></div><div class="line">server.listen(<span class="number">8000</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 设置监听时的回调函数 */</span></div><div class="line">server.on(<span class="string">"listening"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Creat server on http://127.0.0.1:8000/"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/* 设置关闭时的回调函数 */</span></div><div class="line">server.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"server closed!"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/* 设置错误时的回调函数 */</span></div><div class="line">server.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"error!"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="查看服务器监听的地址"><a href="#查看服务器监听的地址" class="headerlink" title="查看服务器监听的地址"></a>查看服务器监听的地址</h2><p>当创建了一个TCP服务器后，可以通过server.address()方法来查看这个TCP服务器监听的地址，并返回一个JSON对象。这个对象的属性有：</p>
<ol>
<li>port：TCP服务器监听的端口号</li>
<li>family：说明TCP服务器监听的地址是 IPv6 还是 IPv</li>
<li>address：TCP服务器监听的地址</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 查看服务器监听的地址</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/* 引入net模块 */</span></div><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 创建TCP服务器 */</span></div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'someone connects'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/* 获取地址信息 */</span></div><div class="line">server.listen(<span class="number">8000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">/* 获取地址信息，得到的是一个json &#123; address: '::', family: 'IPv6', port: 8000 &#125; */</span></div><div class="line">    <span class="keyword">var</span> address = server.address();</div><div class="line">    </div><div class="line">    <span class="comment">/* TCP服务器监听的端口号 */</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"the port of server is"</span>+ address.port);</div><div class="line"></div><div class="line">    <span class="comment">/* TCP服务器监听的地址 */</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"the address of server is"</span>+ address.address);</div><div class="line"></div><div class="line">    <span class="comment">/* 说明TCP服务器监听的地址是 IPv6 还是 IPv4 */</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"the family of server is"</span>+ address.family);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="连接服务器的客户端数量"><a href="#连接服务器的客户端数量" class="headerlink" title="连接服务器的客户端数量"></a>连接服务器的客户端数量</h2><p>创建一个TCP服务器后，可以通过server.getConnections()方法获取连接这个TCP服务器的客户端数量。除此之外，也可以通过maxConnections属性来设置这个服务器的最大连接数量，当连接数量超过最大值时，服务器将拒绝新的连接。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 连接服务器的客户端数量</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/* 引入net模块 */</span></div><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 创建TCP服务器 */</span></div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'someone connects'</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 设置最大连接数量 */</span></div><div class="line">    server.maxConnections=<span class="number">3</span>;</div><div class="line">    server.getConnections(<span class="function"><span class="keyword">function</span>(<span class="params">err,count</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"the count of client is "</span>+count);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/* 获取监听端口 */</span></div><div class="line">server.listen(<span class="number">8000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Creat server on http://127.0.0.1:8000/"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>你可以打开多个网页输入localhost:8000来测试这段代码，也可以用Telnet命令 <code>telnet localhost 8000</code> 来连接这个TCP服务器（上一篇文章有提到如何用Homebrew安装Telnet：<a href="https://zc95.github.io/2018/03/20/Homebrew/">《Homebrew》</a>）。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fpkqytum6zj31kw0s7toa.jpg" alt=""></p>
<h2 id="服务器和客户端之间的通信"><a href="#服务器和客户端之间的通信" class="headerlink" title="服务器和客户端之间的通信"></a>服务器和客户端之间的通信</h2><p>利用socket.write()可以使TCP服务器发送数据给客户端；</p>
<p>socket对象可以用来获取客户端发出的流数据，每次接收到数据的时候触发data事件，通过监听这个事件就可以在回调函数中获取客户端发送的数据了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 发送和获取</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/* 引入net模块 */</span></div><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 创建TCP服务器 */</span></div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">    <span class="comment">/* 获取地址信息 */</span></div><div class="line">    <span class="keyword">var</span> address = server.address();</div><div class="line">    <span class="keyword">var</span> message = <span class="string">"the server address is"</span>+<span class="built_in">JSON</span>.stringify(address);</div><div class="line"></div><div class="line">    <span class="comment">/* 发送数据 */</span></div><div class="line">    socket.write(message,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> writeSize = socket.bytesWritten;</div><div class="line">        <span class="built_in">console</span>.log(message + <span class="string">"has send"</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"the size of message is"</span>+writeSize);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">/* 监听data事件 */</span></div><div class="line">    socket.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(data.toString());</div><div class="line">        <span class="keyword">var</span> readSize = socket.bytesRead;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"the size of data is"</span>+readSize);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/* 获取地址信息 */</span></div><div class="line">server.listen(<span class="number">8000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Creat server on http://127.0.0.1:8000/"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>下图中TCP服务器给客户端发送了字符串：</p>
<blockquote>
<p>the server address is{“address”:”::”,”family”:”IPv6”,”port”:8000}has send</p>
</blockquote>
<p>客户端给TCP服务器发送了字符串 <code>hello TCP!</code> 和字节数。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fpkr5446asj31kw0p5gvz.jpg" alt=""></p>
<h2 id="LINK"><a href="#LINK" class="headerlink" title="LINK"></a>LINK</h2><p>github源码：<a href="https://github.com/zc95/nodeTest/tree/master/TCP" target="_blank" rel="external">https://github.com/zc95/nodeTest/tree/master/TCP</a></p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> TCP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Homebrew]]></title>
      <url>/2018/03/20/Homebrew/</url>
      <content type="html"><![CDATA[<p>Homebrew简称brew，OSX上的软件包管理工具，在Mac终端可以通过brew安装、更新、卸载软件。</p>
<h2 id="Homebrew-能干什么"><a href="#Homebrew-能干什么" class="headerlink" title="Homebrew 能干什么?"></a>Homebrew 能干什么?</h2><p><a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew官网</a> 的title是这么说的：macOS 缺失的软件包管理器，意思就是使用 Homebrew 安装 Apple 没有预装但你需要的东西，比如high sierra 10.13中移除了telent，只需要 <code>brew install telent</code> 一个命令就行。</p>
<a id="more"></a>
<h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><p>一、进入<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew官网</a>，按照官网提示在命令行执行ruby脚本（mac自带ruby），在终端运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<p>二、按提示输入电脑密码，一路enter到底，直到出现下面的信息就说明安装成功。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">==&gt; Next steps:</div><div class="line">- Run `brew <span class="built_in">help</span>` to get started</div><div class="line">- Further documentation: </div><div class="line">    https://docs.brew.sh</div></pre></td></tr></table></figure>
<p>三、运行命令 <code>brew help</code> 就可以了解一些brew常用的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Example usage:</div><div class="line">  brew search [TEXT|/REGEX/]</div><div class="line">  brew (info|home|options) [FORMULA...]</div><div class="line">  brew install FORMULA...</div><div class="line">  brew update</div><div class="line">  brew upgrade [FORMULA...]</div><div class="line">  brew uninstall FORMULA...</div><div class="line">  brew list [FORMULA...]</div><div class="line"></div><div class="line">Troubleshooting:</div><div class="line">  brew config</div><div class="line">  brew doctor</div><div class="line">  brew install -vd FORMULA</div><div class="line"></div><div class="line">Developers:</div><div class="line">  brew create [URL [--no-fetch]]</div><div class="line">  brew edit [FORMULA...]</div><div class="line">  https://docs.brew.sh/Formula-Cookbook</div><div class="line"></div><div class="line">Further <span class="built_in">help</span>:</div><div class="line">  man brew</div><div class="line">  brew <span class="built_in">help</span> [COMMAND]</div><div class="line">  brew home</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Homebrew </tag>
            
            <tag> brew </tag>
            
            <tag> telnet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js构建HTTP服务器]]></title>
      <url>/2018/03/19/nodejs-HTTP/</url>
      <content type="html"><![CDATA[<p>Node.js® is a JavaScript runtime built on <a href="https://developers.google.com/v8/" target="_blank" rel="external">Chrome’s V8 JavaScript engine</a>. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>, is the largest ecosystem of open source libraries in the world.</p>
<h2 id="Node-js简介"><a href="#Node-js简介" class="headerlink" title="Node.js简介"></a>Node.js简介</h2><p><code>Node.js</code> 是一个基于 Google Chrome V8 引擎 的 JavaScript 运行环境。Node.js使用后多种先进的技术，其中包括 事件驱动、非阻塞 I/O 模型，使其轻量又高效，受到众多开发者的追捧。</p>
<p>简单的说，Node.js 就是运行在服务端的 JavaScript ，可以稳定地在各种平台下运行，包括Linux、Windows、Mac OS X、Sun Os 和FreeBSD等众多平台。</p>
<a id="more"></a>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol>
<li>点击 <a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a> 进入nodejs官网</li>
<li>有两个版本：LTS和Current，LTS是长期支持版本，成熟可靠</li>
<li>next到底</li>
<li>打开终端，输入 <code>node -v</code> ，回车，如果出现类似 <code>v6.11.4</code> 的版本号就说明安装成功</li>
</ol>
<h2 id="构建一个HTTP服务器"><a href="#构建一个HTTP服务器" class="headerlink" title="构建一个HTTP服务器"></a>构建一个HTTP服务器</h2><p>在如今web大行其道的时代，支撑无数网页运行的正是HTTP服务器。Node.js之所以受到大量web开发者的青睐，与Node.js有能力自己构建服务器是分不开的。</p>
<ol>
<li><p>在根目录下新建 <code>nodetest</code> 文件夹</p>
</li>
<li><p>在 <code>nodetest</code> 下安装 <code>HTTP</code> 文件夹</p>
</li>
<li><p>在 <code>HTTP</code> 文件夹下新建一个 <code>server.js</code> 的文件</p>
</li>
<li><p>拷贝粘贴这段代码，保存：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 创建http服务器</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/* 引入http模块 */</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 创建HTTP服务器 */</span></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="comment">/* 设置相应的头部 */</span></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">"content-Type"</span> : <span class="string">"text/plain"</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/* 设置相应的数据 */</span></div><div class="line">    response.write(<span class="string">"Welcome to Nodejs"</span>);</div><div class="line">    response.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* 设置服务器端口 */</span></div><div class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Creat server on http://127.0.0.1:8000/"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>打开终端 输入 <code>cd nodetest/HTTP</code> </p>
</li>
<li><p>输入 <code>node server.js</code> ，返回 <code>Creat server on http://127.0.0.1:8000/</code></p>
</li>
<li><p>打开浏览器输入 <code>http://127.0.0.1:8000/</code> 或者 <code>http://localhost:8000</code> </p>
</li>
<li><p>Welcome to Nodejs</p>
</li>
</ol>
<h2 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h2><p>上面说到的HTTP服务器知识实现了将一串字符串发送给服务器。很明显，如果服务器只能发送一些字符串，那几乎是远远不够的，因此我们要做一些扩展，通过文件模块将文件读取并发送给服务器是一个不错的选择，在nodetest文件夹下新建 <code>fsModule.js</code> :</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * fs模块</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/* 引入http模块 */</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 引入fs模块 */</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 创建HTTP服务器 */</span></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="comment">/* 设置响应的头部 */</span></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">"content-Type"</span> : <span class="string">"text/html"</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/* 读取文件数据 */</span></div><div class="line">    <span class="keyword">var</span> data = fs.readFileSync(<span class="string">"./index.html"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/* 设置响应的数据 */</span></div><div class="line">    response.write(data);</div><div class="line">    response.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* 设置服务器端口 */</span></div><div class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Creat server on http://127.0.0.1:8000/"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>同时在同级目录中创建一个名为 <code>index.html</code> 的文件，写入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;! doctype &lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</div><div class="line">  &lt;title&gt;fs <span class="built_in">module</span>&lt;<span class="regexp">/title&gt;</span></div><div class="line"><span class="regexp">  &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;h1&gt;fs文件模块&lt;<span class="regexp">/h1&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>body&gt;</div><div class="line">&lt;<span class="regexp">/html&gt;</span></div></pre></td></tr></table></figure>
<p>node fsModule.js 运行，在浏览器中打开 <code>http://localhost:8000</code> ，Node.js已经把index这个文件发送到客户端了；</p>
<p>需要提及的是，这里HTTP服务器在发送给浏览器的头部信息中将 content-type修改为了 <code>text/html</code> 。 content-type的人作用就是用来表示客户端或者服务器传输数据的类型，服务器或者客客户端通过这个值来做相应的解析。如果这个值改为原来的 <code>text/plain</code> ，浏览器将显示index.html的所有源代码，这显然不是我们想要的。</p>
<h2 id="HTTP服务器的路由控制"><a href="#HTTP服务器的路由控制" class="headerlink" title="HTTP服务器的路由控制"></a>HTTP服务器的路由控制</h2><p>上一节中的服务器虽然已经可以通过读取文件数据来发送给客户端了，但你并没有做任何的路由控制，在浏览器中输入任何URL都将返回同样的内容，简单来说，路由就是URL到函数的映射。</p>
<p>要做到路由控制，通过上面的学习可以预想到修改content-type就可以了，这里假定只需要处理html、js、css和图片文件，创建一个名为 <code>mime.js</code> 的文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="string">".html"</span> : <span class="string">"text/html"</span>,</div><div class="line">    <span class="string">".css"</span> : <span class="string">"text/css"</span>,</div><div class="line">    <span class="string">".js"</span> : <span class="string">"text/javascript"</span>,</div><div class="line">    <span class="string">".gif"</span> : <span class="string">"image/gif"</span>,</div><div class="line">    <span class="string">".ico"</span> : <span class="string">"image/x-icon"</span>,</div><div class="line">    <span class="string">".jpeg"</span> : <span class="string">"image/jpeg"</span>,</div><div class="line">    <span class="string">".jpg"</span> : <span class="string">"image/jpeg"</span>,</div><div class="line">    <span class="string">".png"</span> : <span class="string">"image/png"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个名为 <code>fsModule2.js</code> 的文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 这里通过路径处理判断来返回不同的资源，从而做到简单的路由控制</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/* 引入http模块 */</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 引入fs模块 */</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 引入url模块 */</span></div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 引入mime文件 */</span></div><div class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">"./mime.js"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 引入path模块 */</span></div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 创建HTTP服务器 */</span></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> filePath = <span class="string">"."</span>+url.parse(request.url).pathname;</div><div class="line">    <span class="keyword">if</span>(filePath === <span class="string">"./"</span>)&#123;</div><div class="line">        filePath = <span class="string">'./index.html'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 判断相应的文件是否存在 */</span></div><div class="line">    fs.exists(filePath,<span class="function"><span class="keyword">function</span>(<span class="params">exists</span>)</span>&#123;</div><div class="line">        <span class="comment">/* 存在则返回相应文件数据 */</span></div><div class="line">        <span class="keyword">if</span>(exists)&#123;</div><div class="line">            <span class="keyword">var</span> data = fs.readFileSync(filePath);</div><div class="line">            <span class="keyword">var</span> contentType = mime[path.extname(filePath)];</div><div class="line">            response.writeHead(<span class="number">200</span>,&#123;</div><div class="line">                <span class="string">"content-type"</span>: contentType</div><div class="line">            &#125;);</div><div class="line">            response.write(data);</div><div class="line">            response.end();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            response.end(<span class="string">"404"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* 设置服务器端口 */</span></div><div class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Creat server on http://127.0.0.1:8000/"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里通过对路径处理判断来返回不同的资源，从而做到简单的路由控制。</p>
<h2 id="LINK"><a href="#LINK" class="headerlink" title="LINK"></a>LINK</h2><p>github源码：<a href="https://github.com/zc95/nodeTest/tree/master/HTTP" target="_blank" rel="external">https://github.com/zc95/nodeTest/tree/master/HTTP</a></p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> 本地服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6入门]]></title>
      <url>/2018/03/13/es6-webpack/</url>
      <content type="html"><![CDATA[<p>github：<a href="https://github.com/zc95/es6-webpack" target="_blank" rel="external">https://github.com/zc95/es6-webpack</a></p>
<h2 id="webpack搭建ES6环境"><a href="#webpack搭建ES6环境" class="headerlink" title="webpack搭建ES6环境"></a>webpack搭建ES6环境</h2><p>首先下载源码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/zc95/es6-webpack.git</div></pre></td></tr></table></figure>
<p>然后安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd es6-webpack</div><div class="line">npm install</div><div class="line">npm install webpack -g</div><div class="line">npm install webpack-dev-server -g</div></pre></td></tr></table></figure>
<p>最后运行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd es6-webpack</div><div class="line">npm start</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="es6基础"><a href="#es6基础" class="headerlink" title="es6基础"></a>es6基础</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5 中常量的写法</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">"PI2"</span>, &#123;</div><div class="line">    value: <span class="number">3.1415926</span>,</div><div class="line">    writable: <span class="literal">false</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6 的常量写法</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span></div></pre></td></tr></table></figure>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES3,ES5</span></div><div class="line"><span class="keyword">var</span> evens = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> odds = evens.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> v + <span class="number">1</span></div><div class="line">&#125;);</div><div class="line">  <span class="built_in">console</span>.log(evens, odds);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="keyword">let</span> evens = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">let</span> odds = evens.map(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(evens, odds);</div></pre></td></tr></table></figure>
<p><strong>this的指向</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES3,ES5中 this 的指向是 该函数被调用的对象</span></div><div class="line">  <span class="keyword">var</span> factory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">this</span>.b = <span class="string">'b'</span>;</div><div class="line">    <span class="keyword">this</span>.c = &#123;</div><div class="line">      a: <span class="string">'a+'</span>,</div><div class="line">      b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> factory().c.b());</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6箭头函数中 this 的指向是 定义时this的指向</span></div><div class="line"><span class="keyword">var</span> factory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">this</span>.b = <span class="string">'b'</span>;</div><div class="line">    <span class="keyword">this</span>.c = &#123;</div><div class="line">      a: <span class="string">'a+'</span>,</div><div class="line">      b: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> factory().c.b());</div></pre></td></tr></table></figure>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p><strong>默认参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5\ES3 默认参数的写法</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (y === <span class="literal">undefined</span>) &#123;</div><div class="line">      y = <span class="number">7</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (z === <span class="literal">undefined</span>) &#123;</div><div class="line">      z = <span class="number">42</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x + y + z</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">3</span>));</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6 默认参数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = <span class="number">7</span>, z = <span class="number">42</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y + z</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">3</span>));</div></pre></td></tr></table></figure>
<p><strong>可变参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES3,ES5 可变参数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">      sum += item * <span class="number">1</span>;</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>));</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6 可变参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">...a</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    a.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">      sum += item * <span class="number">1</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>));</div></pre></td></tr></table></figure>
<p><strong>合并数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5 合并数组</span></div><div class="line">  <span class="keyword">var</span> params = [<span class="string">'hello'</span>, <span class="literal">true</span>, <span class="number">7</span>];</div><div class="line">  <span class="keyword">var</span> other = [<span class="number">1</span>, <span class="number">2</span>].concat(params);</div><div class="line">  <span class="built_in">console</span>.log(other);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6 利用扩展运算符合并数组</span></div><div class="line">  <span class="keyword">var</span> params = [<span class="string">'hello'</span>, <span class="literal">true</span>, <span class="number">7</span>];</div><div class="line">  <span class="keyword">var</span> other = [</div><div class="line">    <span class="number">1</span>, <span class="number">2</span>, ...params</div><div class="line">  ];</div><div class="line">  <span class="built_in">console</span>.log(other);</div></pre></td></tr></table></figure>
<h3 id="对象代理"><a href="#对象代理" class="headerlink" title="对象代理"></a>对象代理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES3,ES5 数据保护</span></div><div class="line">  <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = &#123;</div><div class="line">      name: <span class="string">'es3'</span>,</div><div class="line">      sex: <span class="string">'male'</span>,</div><div class="line">      age: <span class="number">15</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> data[key]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.set = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (key !== <span class="string">'sex'</span>) &#123;</div><div class="line">        data[key] = value</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 声明一个实例</span></div><div class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line">  <span class="comment">// 读取</span></div><div class="line">  <span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: person.get(<span class="string">'name'</span>), <span class="attr">sex</span>: person.get(<span class="string">'sex'</span>), <span class="attr">age</span>: person.get(<span class="string">'age'</span>)&#125;);</div><div class="line">  <span class="comment">// 修改</span></div><div class="line">  person.set(<span class="string">'name'</span>, <span class="string">'es3-cname'</span>);</div><div class="line">  <span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: person.get(<span class="string">'name'</span>), <span class="attr">sex</span>: person.get(<span class="string">'sex'</span>), <span class="attr">age</span>: person.get(<span class="string">'age'</span>)&#125;);</div><div class="line">  person.set(<span class="string">'sex'</span>, <span class="string">'female'</span>);</div><div class="line">  <span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: person.get(<span class="string">'name'</span>), <span class="attr">sex</span>: person.get(<span class="string">'sex'</span>), <span class="attr">age</span>: person.get(<span class="string">'age'</span>)&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line">  <span class="keyword">var</span> Person = &#123;</div><div class="line">    name: <span class="string">'es5'</span>,</div><div class="line">    age: <span class="number">15</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.defineProperty(Person, <span class="string">'sex'</span>, &#123;</div><div class="line">    writable: <span class="literal">false</span>,</div><div class="line">    value: <span class="string">'male'</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: Person.name, <span class="attr">age</span>: Person.age, <span class="attr">sex</span>: Person.sex&#125;);</div><div class="line">  Person.name = <span class="string">'es5-cname'</span>;</div><div class="line">  <span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: Person.name, <span class="attr">age</span>: Person.age, <span class="attr">sex</span>: Person.sex&#125;);</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    Person.sex = <span class="string">'female'</span>;</div><div class="line">    <span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: Person.name, <span class="attr">age</span>: Person.age, <span class="attr">sex</span>: Person.sex&#125;);</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(e);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6</span></div><div class="line">  <span class="keyword">let</span> Person = &#123;</div><div class="line">    name: <span class="string">'es6'</span>,</div><div class="line">    sex: <span class="string">'male'</span>,</div><div class="line">    age: <span class="number">15</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(Person, &#123;</div><div class="line">    get(target, key) &#123;</div><div class="line">      <span class="keyword">return</span> target[key]</div><div class="line">    &#125;,</div><div class="line">    set(target,key,value)&#123;</div><div class="line">      <span class="keyword">if</span>(key!==<span class="string">'sex'</span>)&#123;</div><div class="line">        target[key]=value;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.table(&#123;</div><div class="line">    name:person.name,</div><div class="line">    sex:person.sex,</div><div class="line">    age:person.age</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    person.sex=<span class="string">'female'</span>;</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(e);</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[撸了一个canvas手写板]]></title>
      <url>/2018/03/08/canvasPalette/</url>
      <content type="html"><![CDATA[<p>用 canvas 写了一个手写板，功能：画笔粗细、橡皮擦大小、画笔颜色、清空画布、历史操作等</p>
<h2 id="canvas手写板"><a href="#canvas手写板" class="headerlink" title="canvas手写板"></a>canvas手写板</h2><ul>
<li><a href="https://zc95.github.io/demo/canvas.html">demo</a></li>
<li><a href="https://github.com/zc95/canvas" target="_blank" rel="external">github</a></li>
</ul>
<h2 id="扫一扫"><a href="#扫一扫" class="headerlink" title="扫一扫"></a>扫一扫</h2><p><img width="150" src="https://ws4.sinaimg.cn/large/006tNc79gy1fp5r4kgijtj307s07st9m.jpg"></p>
<hr>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fp5tb8a00yj31401z40vt.jpg" height="600"></p>
<hr>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fp5tb8s4tgj31401z4wjo.jpg" height="600"></p>
<a id="more"></a>
<hr>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fp5tbmm3ytj31401z4wj1.jpg" height="600"></p>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> canvas </tag>
            
            <tag> material design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[直播平台的弹幕功能]]></title>
      <url>/2018/02/21/liveVideo/</url>
      <content type="html"><![CDATA[<h2 id="类似直播平台的弹幕功能（微信上有bug）"><a href="#类似直播平台的弹幕功能（微信上有bug）" class="headerlink" title="类似直播平台的弹幕功能（微信上有bug）"></a>类似直播平台的弹幕功能（微信上有bug）</h2><ul>
<li><a href="https://zc95.github.io/demo/liveVideo.html">demo</a></li>
<li><a href="https://github.com/zc95/liveVideo" target="_blank" rel="external">github</a></li>
</ul>
<h2 id="扫一扫"><a href="#扫一扫" class="headerlink" title="扫一扫"></a>扫一扫</h2><p><img width="150" src="https://ws4.sinaimg.cn/large/006tNc79gy1fonz7vts1rj307s07sq3t.jpg"></p>
<hr>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fonz8gb76lj30u01hcgq0.jpg" height="600"></p>
<a id="more"></a>
<h2 id="QQ、微信内置浏览器-X5内核的坑"><a href="#QQ、微信内置浏览器-X5内核的坑" class="headerlink" title="QQ、微信内置浏览器 X5内核的坑"></a>QQ、微信内置浏览器 X5内核的坑</h2><h3 id="进入页面video自动全屏、自动播放"><a href="#进入页面video自动全屏、自动播放" class="headerlink" title="进入页面video自动全屏、自动播放"></a>进入页面video自动全屏、自动播放</h3><p>然而我并不需要这样，解决方法：给video标签加上 x5-playsinline=”” playsinline=”” webkit-playsinline=”” 就ok</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;video src=<span class="string">"http://huya-w10.huya.com/migrate/1714/3601054/1300/328ac8830192294f41c33ccc1f61d199.mp4"</span> </div><div class="line"> controls=<span class="string">""</span> x5-playsinline=<span class="string">""</span> playsinline=<span class="string">""</span> webkit-playsinline=<span class="string">""</span> </div><div class="line">poster=<span class="string">""</span> preload=<span class="string">"auto"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="video层级默认最高"><a href="#video层级默认最高" class="headerlink" title="video层级默认最高"></a>video层级默认最高</h3><p>z-index怎么设置都无效，所以微信或者qq扫出来的页面弹幕都是看不到的，在video下面了。。。</p>
<p>暂时没法解决，有空再看吧</p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> video </tag>
            
            <tag> X5内核 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自己写了个音乐播放器]]></title>
      <url>/2018/02/21/musicPlayer/</url>
      <content type="html"><![CDATA[<h2 id="material-design风格的音乐播放器"><a href="#material-design风格的音乐播放器" class="headerlink" title="material design风格的音乐播放器"></a>material design风格的音乐播放器</h2><ul>
<li><a href="https://zc95.github.io/demo/music.html">demo</a></li>
<li><a href="https://github.com/zc95/music" target="_blank" rel="external">github</a></li>
</ul>
<h2 id="扫一扫"><a href="#扫一扫" class="headerlink" title="扫一扫"></a>扫一扫</h2><p><img width="150" src="https://ws3.sinaimg.cn/large/006tNc79gy1fonxkcugj3j307s07sq2p.jpg"></p>
<hr>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fony99p9rfj30u01hcmzd.jpg" height="600"></p>
<hr>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fony8j721lj30u01hcwhv.jpg" height="600"></p>
<a id="more"></a>
<h2 id="HTML-5-audio标签"><a href="#HTML-5-audio标签" class="headerlink" title="HTML 5 audio标签"></a>HTML 5 audio标签</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p> 标签定义声音，比如音乐或其他音频流，是 HTML 5 的新标签。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"https://music.163.com/song/media/outer/url?id=451703096.mp3"</span>&gt;</span></div><div class="line">您的浏览器不支持 audio 标签。</div><div class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="提示和注释"><a href="#提示和注释" class="headerlink" title="提示和注释"></a>提示和注释</h3><p>可以在开始标签和结束标签之间放置文本内容，这样老的浏览器就可以显示出不支持该标签的信息。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.w3school.com.cn/html5/att_audio_autoplay.asp" target="_blank" rel="external">autoplay</a></td>
<td>autoplay</td>
<td>如果出现该属性，则音频在就绪后马上播放。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/html5/att_audio_controls.asp" target="_blank" rel="external">controls</a></td>
<td>controls</td>
<td>如果出现该属性，则向用户显示控件，比如播放按钮。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/html5/att_audio_loop.asp" target="_blank" rel="external">loop</a></td>
<td>loop</td>
<td>如果出现该属性，则每当音频结束时重新开始播放。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/html5/att_audio_preload.asp" target="_blank" rel="external">preload</a></td>
<td>preload</td>
<td>如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/html5/att_audio_src.asp" target="_blank" rel="external">src</a></td>
<td><em>url</em></td>
<td>要播放的音频的 URL。</td>
</tr>
</tbody>
</table>
<h2 id="Javascript控制html5-Audio标签"><a href="#Javascript控制html5-Audio标签" class="headerlink" title="Javascript控制html5 Audio标签"></a>Javascript控制html5 Audio标签</h2><h3 id="javascript动态创建audio标签"><a href="#javascript动态创建audio标签" class="headerlink" title="javascript动态创建audio标签"></a>javascript动态创建audio标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> audio=<span class="built_in">document</span>.creatElement(<span class="string">"audio"</span>);</div><div class="line">audio.src=<span class="string">"audio/source.ogg"</span>;<span class="comment">//路径</span></div><div class="line">audio.play();</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">audio=<span class="keyword">new</span> Audio(<span class="string">"audio/source.ogg"</span>);<span class="comment">//路径</span></div><div class="line">audio.play();</div></pre></td></tr></table></figure>
<h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>我们可以通过preload=”auto”来实现音频的自动加载，但是我们无法知道音频加载的进度</p>
<p>这时候可以用canplaythrough来完成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> audio = <span class="built_in">document</span>.createElement(<span class="string">"audio"</span>);</div><div class="line">audio.src = <span class="string">"https://music.163.com/song/media/outer/url?id=451703096.mp3"</span>;</div><div class="line">audio.addEventListener(<span class="string">"canplaythrough"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">truealert(<span class="string">'音频文件已经准备好，随时待命'</span>);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>第一次运行时间会长一些，第二次运行由于文件已经缓存到本地，所以会直接弹出提示框。</p>
<h3 id="javascript控制audio的播放，暂停，停止"><a href="#javascript控制audio的播放，暂停，停止" class="headerlink" title="javascript控制audio的播放，暂停，停止"></a>javascript控制audio的播放，暂停，停止</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aPlay</span>(<span class="params"></span>) </span>&#123;</div><div class="line">trueaudio.play();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aPause</span>(<span class="params"></span>) </span>&#123;</div><div class="line">trueaudio.pause();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aStop</span>(<span class="params"></span>) </span>&#123;</div><div class="line">trueaudio.currentTime = <span class="number">0</span>;</div><div class="line">trueaudio.pause();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aSkip</span>(<span class="params"></span>) </span>&#123;</div><div class="line">trueaudio.currentTime = <span class="number">50</span>;</div><div class="line">trueaudio.play();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"aPlay();"</span> value=<span class="string">"播放音频"</span>&gt;</div><div class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"aPause();"</span> value=<span class="string">"暂停音频"</span>&gt;</div><div class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"aStop();"</span> value=<span class="string">"停止音频"</span>&gt;</div><div class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"aSkip();"</span> value=<span class="string">"跳到第50秒"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="javascript控制audio的声音大小"><a href="#javascript控制audio的声音大小" class="headerlink" title="javascript控制audio的声音大小"></a>javascript控制audio的声音大小</h3><blockquote>
<p>audio.volume = 0;//表示静音  </p>
<p>audio.volume = 1; //表示声音最大</p>
<p>audio.volume //返回当前音量，声音值在0-1之间</p>
</blockquote>
<h3 id="javascript控制audio的快进，快退，以及显示进度与时长"><a href="#javascript控制audio的快进，快退，以及显示进度与时长" class="headerlink" title="javascript控制audio的快进，快退，以及显示进度与时长"></a>javascript控制audio的快进，快退，以及显示进度与时长</h3><blockquote>
<p>audio.currentTime //控制audio的进度</p>
<p>audio.duration //返回当前音量的总时长</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> material design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[教你下载会员歌曲]]></title>
      <url>/2018/02/19/musicLink/</url>
      <content type="html"><![CDATA[<p>教你找歌曲的外链（要会员的歌曲都能下载🤪）</p>
<h2 id="什么是歌曲的外链？"><a href="#什么是歌曲的外链？" class="headerlink" title="什么是歌曲的外链？"></a>什么是歌曲的外链？</h2><p>我们手机里的歌曲都是下载好的mp3文件，比如说散就散.mp3，</p>
<p>而外链就比如 <a href="https://music.163.com/song/media/outer/url?id=523251118.mp3" target="_blank" rel="external">https://music.163.com/song/media/outer/url?id=523251118.mp3</a> 这样链接的形式。</p>
<h2 id="怎么免费下载会员歌曲？"><a href="#怎么免费下载会员歌曲？" class="headerlink" title="怎么免费下载会员歌曲？"></a>怎么免费下载会员歌曲？</h2><p>你应该注意到了《说散就散》在qq音乐和网易云都是要vip才能下载<br><a id="more"></a><br><img style="height:400px; display:inline-block;" src="https://ws4.sinaimg.cn/large/006tNc79gy1fom4irp01wj30nq1600x0.jpg"></p>
<p><img style="height:400px; display:inline-block;" src="https://ws1.sinaimg.cn/large/006tNc79gy1fom4m03u1bj30no15y77v.jpg"></p>
<p>这里以网易云音乐的网页版为例说一下”破解“的方法</p>
<p>这个外链下载会员歌曲的方法也是最近撸一个播放器的时候发现的 <a href="https://zc95.github.io/demo/music">https://zc95.github.io/demo/music</a> （还在改进，下次再说吧 ，逃。。。）</p>
<h2 id="废话少说，开始了"><a href="#废话少说，开始了" class="headerlink" title="废话少说，开始了"></a>废话少说，开始了</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>打开你电脑上的浏览器，输入 <a href="http://music.163.com" target="_blank" rel="external">http://music.163.com</a> ，网易云音乐官网，输入 “说散就散” 搜索，点第一个要钱的原唱！</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>到了 <a href="http://music.163.com/#/song?id=523251118" target="_blank" rel="external">http://music.163.com/#/song?id=523251118</a> 这个页面</p>
<ol>
<li>这个什么 <code>生成外链播放器</code> 不用管，就是个iframe（一般用来博客里），点了提示没版权，放弃。。。</li>
<li>还有下载按钮，点了提示下载PC端和app，肯定还是要会员。。。放弃</li>
<li><strong>重点是url，有个?id = xxxxx ，原来百度云网页版的每首歌都有自己的id标识</strong></li>
</ol>
<p><img style="height:400px;" src="https://ws2.sinaimg.cn/large/006tNc79gy1fom543cxz3j317i0tgq8q.jpg"></p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>从url得到这首歌的id是 <code>523251118</code></p>
<p>所以这首歌的外链就是 <a href="https://music.163.com/song/media/outer/url?id=523251118.mp3" target="_blank" rel="external">https://music.163.com/song/media/outer/url?id=523251118.mp3</a> ，之后找到别的歌，把这个链接的id替换了就行，除了那种网易云没播放版权的，所有的都可以。</p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>打开电脑里的浏览器，输入 <a href="https://music.163.com/song/media/outer/url?id=523251118.mp3" target="_blank" rel="external">https://music.163.com/song/media/outer/url?id=523251118.mp3</a> 回车，这时候url被解析成好长的一段，不用管它，有上面的链接就足够了，点html5 video标签上的下载按钮就行啦（如下），移动端和Safari的video应该是没有下载按钮的。。。</p>
<video controls name="media"><source src="https://music.163.com/song/media/outer/url?id=523251118.mp3" type="audio/mpeg"></video>

<h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>如果是安卓机的就直接把这首歌导入到手机里去，qq音乐、网易云都会自动加到列表里去。</p>
<p>如果是iphone，，，那就没啥吊用了。。。。</p>
<hr>
<p>最后说一下，有很多方法下载这种会员歌曲，，发现这种方法是因为最近在手撸一个音乐播放器，需要用到这样的链接<a href="https://zc95.github.io/demo/music">https://zc95.github.io/demo/music</a> </p>
<p>不然才不费这么大劲。。毕竟我有破解版😂😂😂</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fom5ymxc3aj31ik11egs4.jpg" alt="https://ws1.sinaimg.cn/large/006tNc79gy1fom5ymxc3aj31ik11egs4.jpg"></p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 歌曲 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Rich Text Format]]></title>
      <url>/2018/02/06/RTF/</url>
      <content type="html"><![CDATA[<p>自己写的一个移动端的富文本编辑器</p>
<h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><ul>
<li><a href="https://htmlpreview.github.io/?https://github.com/zc95/RTF/blob/master/index.html" target="_blank" rel="external">demo</a></li>
<li><a href="https://github.com/zc95/RTF" target="_blank" rel="external">github</a></li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fo74tsp0mij31401z4aeo.jpg" style="height:500px;"><br><a id="more"></a></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fo74ugdi9qj31401z4q72.jpg" style="height:500px;"><br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fo74v4k9udj31401z40wu.jpg" style="height:500px;"></p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一行代码实现星级评分]]></title>
      <url>/2018/01/23/star-rating/</url>
      <content type="html"><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fnqvphubb8j30lu0dodhh.jpg" alt=""></p>
<h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><ul>
<li><a href="https://htmlpreview.github.io/?https://github.com/zc95/star-rating/blob/master/index.html" target="_blank" rel="external">demo</a></li>
<li><a href="https://github.com/zc95/star-rating" target="_blank" rel="external">github</a></li>
</ul>
<a id="more"></a>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.score_wrapper</span> &#123;</div><div class="line">      <span class="attribute">display</span>:inline-block;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">45px</span>;</div><div class="line">      <span class="attribute">cursor</span>: pointer;</div><div class="line">      <span class="attribute">color</span>: <span class="number">#dc2020</span>;</div><div class="line">      <span class="attribute">-webkit-user-select</span>:none;</div><div class="line">      <span class="attribute">-moz-user-select</span>:none;</div><div class="line">      <span class="attribute">-ms-user-select</span>:none;</div><div class="line">      <span class="attribute">user-select</span>:none;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"score_wrapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  ScoreInit(<span class="number">3</span>); <span class="comment">//初始化，参数是0～5的数字，代表星数，传空默认0颗星</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//点击</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScoreInit</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  Score((e == <span class="literal">null</span>) ? <span class="number">0</span> : e); <span class="comment">//传空默认0颗星</span></div><div class="line">  $(<span class="string">".score_wrapper"</span>).bind(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> eachWidth = $(<span class="string">".score_wrapper"</span>).width() / <span class="number">5</span>; <span class="comment">//计算出每个星星的长度</span></div><div class="line">    <span class="keyword">var</span> X = e.pageX - $(<span class="keyword">this</span>).offset().left; <span class="comment">//距离父容器的偏移距离</span></div><div class="line">    <span class="keyword">var</span> score = <span class="built_in">Math</span>.floor(X / eachWidth) + <span class="number">1</span>; <span class="comment">//分数</span></div><div class="line">    Score((getScore() == score) ? <span class="number">0</span> : score); <span class="comment">//取消评分</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//评分</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Score</span>(<span class="params">rate</span>) </span>&#123;</div><div class="line">  $(<span class="string">".score_wrapper"</span>).html(<span class="string">"★★★★★☆☆☆☆☆"</span>.slice(<span class="number">5</span> - rate, <span class="number">10</span> - rate));</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取评分</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScore</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = $(<span class="string">".score_wrapper"</span>).html(), num = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (str[i] == <span class="string">"★"</span>) &#123;</div><div class="line">      num++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> num;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[水平垂直居中]]></title>
      <url>/2018/01/10/centerAndmiddle/</url>
      <content type="html"><![CDATA[<h2 id="水平垂直居中（已知宽高）"><a href="#水平垂直居中（已知宽高）" class="headerlink" title="水平垂直居中（已知宽高）"></a>水平垂直居中（已知宽高）</h2><p>方法很多，这里就说一个不常见的</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>zc95.github.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>zc95.github.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.father</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.son</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">width</span>: <span class="number">60px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="水平垂直居中（宽高不确定-伪元素）"><a href="#水平垂直居中（宽高不确定-伪元素）" class="headerlink" title="水平垂直居中（宽高不确定/伪元素）"></a>水平垂直居中（宽高不确定/伪元素）</h2><p>用伪元素和 inline-block / vertical-align 可以实现水平垂直居中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>zc95.github.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>zc95.github.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.father</span> &#123;</div><div class="line">  <span class="attribute">position</span>:fixed;</div><div class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.father</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">margin-right</span>: -<span class="number">0.25em</span>; <span class="comment">/*去空隙*/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.son</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="水平垂直居中（宽高不确定-flex）"><a href="#水平垂直居中（宽高不确定-flex）" class="headerlink" title="水平垂直居中（宽高不确定/flex）"></a>水平垂直居中（宽高不确定/flex）</h2><p>css弹性布局（flex）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span> <span class="attr">style</span>=<span class="string">"display:inline-block;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>zc95.github.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>zc95.github.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.father</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/*定义body的元素垂直居中*/</span></div><div class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/*定义body的里的元素水平居中*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.son</span>&#123;</div><div class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid gray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="水平垂直居中（宽高不确定-transform）"><a href="#水平垂直居中（宽高不确定-transform）" class="headerlink" title="水平垂直居中（宽高不确定/transform）"></a>水平垂直居中（宽高不确定/transform）</h2><p>CSS3的transform，通过设置div的transform: translate(-50%,-50%)，使得div向上平移（translate）自身高度的一半(50%)、自身宽度的一半(50%)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>zc95.github.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>zc95.github.io<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.son</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid gray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 水平垂直居中 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ToDo 待办事宜app]]></title>
      <url>/2018/01/07/ToDo/</url>
      <content type="html"><![CDATA[<h2 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h2><p>最近做事情总是丢三落四，老忘记一些重要的事情，就突发奇想写了这个 <code>ToDo</code> 待办事宜的app。</p>
<ol>
<li><a href="https://htmlpreview.github.io/?https://github.com/zc95/ToDo/blob/master/index.html#" target="_blank" rel="external">项目地址</a></li>
<li><a href="https://github.com/zc95/ToDo" target="_blank" rel="external">github地址</a></li>
</ol>
<p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;display:inline-block;" src="https://ws2.sinaimg.cn/large/006tNc79gy1fn8bgdbyhbj30xr1o04b6.jpg" height="500px;"><br><img style="box-shadow:1px 1px 10px #888888;display:inline-block;" src="https://ws4.sinaimg.cn/large/006tNc79gy1fn8bo7m0uqj30xr1o0tgz.jpg" height="500px;"><br></p>


<a id="more"></a>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ol>
<li>可以添加待办事项到首页中，数据都是保存在本地localStorage的，只要不是手动删除或者换了设备，数据是永久保存的</li>
<li>点击事项可以将待办事项的状态改为 <code>选中</code> 和 <code>未选中</code> ，每次改变状态都会保存到localStorage，每天的开始都可以点 <code>重置所有状态</code> 的按钮来设置所有的待办事项为未选中</li>
<li>可以删除已添加的待办事项或者彻底删除所有本地localStorage数据</li>
</ol>
<p>可以复制项目链接在自己的浏览器中打开，然后添加到桌面，方便使用；<br><a href="https://htmlpreview.github.io/?https://github.com/zc95/ToDo/blob/master/index.html" target="_blank" rel="external">https://htmlpreview.github.io/?https://github.com/zc95/ToDo/blob/master/index.html</a></p>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> localStorage </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VMware服务器虚拟化]]></title>
      <url>/2017/12/26/VMware/</url>
      <content type="html"><![CDATA[<p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="https://ws2.sinaimg.cn/large/006tNc79gy1fmucwl7r2aj31hc0u0dng.jpg" width="90%;"><br></p>

<p>今天去机房打了一天酱油，听到了看到了一些没接触过的东西，做个简单的整理。</p>
<h2 id="VMware服务器虚拟化"><a href="#VMware服务器虚拟化" class="headerlink" title="VMware服务器虚拟化"></a>VMware服务器虚拟化</h2><p><a href="https://www.vmware.com/cn/solutions/virtualization.html" target="_blank" rel="external">VMware官网</a></p>
<p>大多数服务器的容量利用率不足 15%，这不仅导致了服务器数量剧增，还增加了复杂性。实现服务器虚拟化后，多个操作系统可以作为虚拟机在单台物理服务器上运行，并且每个操作系统都可以访问底层服务器的计算资源，从而解决效率低下问题。接下来将服务器集群聚合为一项整合资源，这可以提高整体效率并降低成本。服务器虚拟化还可以加快工作负载部署速度、提高应用性能以及改善可用性。</p>
<a id="more"></a>
<h3 id="虚拟化的优势"><a href="#虚拟化的优势" class="headerlink" title="虚拟化的优势"></a>虚拟化的优势</h3><p>虚拟化可以提高 IT 部门的敏捷性、灵活性和可扩展性，同时大幅节约成本。工作负载的部署速度更快、性能和可用性得到提升、运维实现自动化，所有这一切不仅简化了 IT 管理，还降低了拥有成本和运维成本。其他优势包括：</p>
<ol>
<li>降低资金成本和运维成本。</li>
<li>最大限度地减少或消除停机。</li>
<li>提高 IT 部门的工作效率、效益、敏捷性和响应能力。</li>
<li>更快地调配应用和资源。</li>
<li>支持业务连续性与灾难恢复。</li>
<li>简化数据中心管理。</li>
<li>构建真正的软件定义的数据中心</li>
</ol>
<h3 id="VMware-vSphere-client"><a href="#VMware-vSphere-client" class="headerlink" title="VMware vSphere client"></a>VMware vSphere client</h3><p>用来连接<a href="https://www.baidu.com/s?wd=VMware&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Y3rARvrjnvm19bPHfsnA790ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnHT4P16dPHm3rjcdnW0drHnsPs" target="_blank" rel="external">VMware</a> ESXi主机和vCenter server，业内最完整、 最强健的虚拟化平台。创建资源池来管理计算、 网络和存储容量与易用性，并提供最高水平的服务，每个应用程序工作负载以最低的总成本。VSphere — — 取决于世界上要求最苛刻的数据中心虚拟化您业务关键型应用程序为空前的灵活性和可靠性。</p>
<h2 id="UPS电源"><a href="#UPS电源" class="headerlink" title="UPS电源"></a>UPS电源</h2><p><a href="https://baike.baidu.com/item/不间断电源" target="_blank" rel="external">百度百科</a></p>
<p>UPS电源一般指不间断电源。</p>
<p><a href="https://baike.baidu.com/item/UPS" target="_blank" rel="external">UPS</a>（Uninterruptible Power System/Uninterruptible Power Supply），即不间断<a href="https://baike.baidu.com/item/%E7%94%B5%E6%BA%90" target="_blank" rel="external">电源</a>，是将<a href="https://baike.baidu.com/item/%E8%93%84%E7%94%B5%E6%B1%A0" target="_blank" rel="external">蓄电池</a>（多为铅酸免维护蓄电池）与主机相连接，通过主机逆变器等模块电路将直流电转换成市电的系统设备。主要用于给单台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="external">计算机</a>、计算机网络系统或其它<a href="https://baike.baidu.com/item/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87" target="_blank" rel="external">电力电子设备</a>如电磁阀、压力变送器等提供稳定、不间断的电力供应。当市电输入正常时，UPS 将市电稳压后供应给<a href="https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD" target="_blank" rel="external">负载</a>使用，此时的UPS就是一台交流式电<a href="https://baike.baidu.com/item/%E7%A8%B3%E5%8E%8B%E5%99%A8" target="_blank" rel="external">稳压器</a>，同时它还向机内电池充电；当市电中断（事故停电）时， UPS 立即将电池的直流电能，通过逆变器切换转换的<a href="https://baike.baidu.com/item/%E6%96%B9%E6%B3%95" target="_blank" rel="external">方法</a>向负载继续供应220V<a href="https://baike.baidu.com/item/%E4%BA%A4%E6%B5%81%E7%94%B5" target="_blank" rel="external">交流电</a>，使负载维持正常工作并保护负载软、<a href="https://baike.baidu.com/item/%E7%A1%AC%E4%BB%B6" target="_blank" rel="external">硬件</a>不受损坏。UPS 设备通常对电压过高或电压过低都能提供保护。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li><strong>UPS</strong>是针对中国电网环境和<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7" target="_blank" rel="external">网络监控</a>及<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">网络系统</a>、<a href="https://baike.baidu.com/item/%E5%8C%BB%E7%96%97" target="_blank" rel="external">医疗</a>系统等对<a href="https://baike.baidu.com/item/%E7%94%B5%E6%BA%90" target="_blank" rel="external">电源</a>的可靠性要求，克服中、大型<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="external">计算机</a>网络系统集中供电所造成的供电电网环境日益恶劣的问题，以全新的数字技术研制出的第三代工频纯在线式智能型UPS。直流电源，是维持电路中形成稳恒电流的装置。如干电池、蓄电池、<a href="https://baike.baidu.com/item/%E7%9B%B4%E6%B5%81%E5%8F%91%E7%94%B5%E6%9C%BA" target="_blank" rel="external">直流发电机</a>等。</li>
<li><strong>UPS</strong>和<a href="https://baike.baidu.com/item/%E7%9B%B4%E6%B5%81%E7%94%B5%E6%BA%90" target="_blank" rel="external">直流电源</a>是企业重要的供电保障设备，传统的维护管理包括：①日常巡检外观，定期更换电池、<a href="https://baike.baidu.com/item/%E6%BB%A4%E6%B3%A2%E7%94%B5%E5%AE%B9" target="_blank" rel="external">滤波电容</a>、<a href="https://baike.baidu.com/item/%E9%A3%8E%E6%9C%BA" target="_blank" rel="external">风机</a>等易损件，大修时做电池活化等；②改造或采用换代设备，使用高级工具测试电池性能。这种管理方式企业投入成本高，维护人员工作量大，不易实时掌握设备运行状态和关键数据，设备事故预防能力低。实施在线维护管理可避免传统方式的不足之处，获得良好效益。</li>
<li><strong>UPS</strong>的中文意思为“不间断电源”，是英语“Uninterruptible Power System/Uninterruptible Power Supply”的缩写，它可以保障计算机系统在停电之后继续工作一段时间以使用户能够紧急<a href="https://baike.baidu.com/item/%E5%AD%98%E7%9B%98" target="_blank" rel="external">存盘</a>，使用户不致因停电而影响工作或丢失<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE" target="_blank" rel="external">数据</a>。</li>
</ol>
<hr>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p><a href="https://baike.baidu.com/item/cisco交换机" target="_blank" rel="external">百度百科</a></p>
<p>交换机（Switch）意为“<a href="https://baike.baidu.com/item/%E5%BC%80%E5%85%B3/2275072" target="_blank" rel="external">开关</a>”是一种用于电（光）信号转发的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87" target="_blank" rel="external">网络设备</a>。它可以为接入交换机的任意两个<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%8A%82%E7%82%B9" target="_blank" rel="external">网络节点</a>提供独享的电信号通路。最常见的交换机是<a href="https://baike.baidu.com/item/%E4%BB%A5%E5%A4%AA%E7%BD%91%E4%BA%A4%E6%8D%A2%E6%9C%BA" target="_blank" rel="external">以太网交换机</a>。其他常见的还有电话语音交换机、<a href="https://baike.baidu.com/item/%E5%85%89%E7%BA%A4%E4%BA%A4%E6%8D%A2%E6%9C%BA" target="_blank" rel="external">光纤交换机</a>等。</p>
<p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="https://ws1.sinaimg.cn/large/006tNc79gy1fmudmq5dhvj31hc1han99.jpg" width="90%;"><br></p>

<p>图片上是 <code>Cisco Catalyst 4500-E Series</code> ，<a href="https://www.cisco.com/c/zh_cn/products/switches/catalyst-4500-x-series-switches/index.html?POSITION=SEM&amp;COUNTRY_SITE=cn&amp;CAMPAIGN=EN-04+Switches&amp;CREATIVE=APJC_GMP_EN-04_CN-Switches%2bSwitches%7cModel-45E&amp;REFERRING_SITE=Baidu&amp;KEYWORD=catalyst+4500E&amp;CCID=cc000010&amp;DTID=psebdu000360&amp;gclid=CMD8q-zEp9gCFVLZvAodLsEBXg&amp;gclsrc=ds" target="_blank" rel="external">Cisco Catalyst 4500-X 系列交换机</a></p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>交换（switching）</strong>是按照通信两端传输信息的需要，用人工或设备自动完成的方法，把要传输的信息送到符合要求的相应路由上的技术的统称。根据工作位置的不同，可以分为<a href="https://baike.baidu.com/item/%E5%B9%BF%E5%9F%9F%E7%BD%91" target="_blank" rel="external">广域网</a>交换机和<a href="https://baike.baidu.com/item/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%A4%E6%8D%A2%E6%9C%BA" target="_blank" rel="external">局域网交换机</a>。广义的<strong>交换机（switch）</strong>就是一种在通信系统中完成信息交换功能的设备。</p>
<p>在<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">计算机网络系统</a>中，交换概念的提出改进了共享工作模式。我们以前介绍过的HUB集线器就是一种共享设备，HUB本身不能识别目的地址，当同一局域网内的A主机给B主机传输数据时，<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%8C%85" target="_blank" rel="external">数据包</a>在以HUB为架构的网络上是以广播方式传输的，由每一台终端通过验证数据包头的地址信息来确定是否接收。也就是说，在这种工作方式下，同一时刻网络上只能传输一组<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%B8%A7" target="_blank" rel="external">数据帧</a>的通讯，如果发生碰撞还得重试。这种方式就是共享<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD" target="_blank" rel="external">网络带宽</a>。</p>
<hr>
<h2 id="hub"><a href="#hub" class="headerlink" title="hub"></a>hub</h2><p><a href="https://baike.baidu.com/item/HUB" target="_blank" rel="external">百度百科</a></p>
<p>HUB是一个多端口的<a href="https://baike.baidu.com/item/%E8%BD%AC%E5%8F%91%E5%99%A8" target="_blank" rel="external">转发器</a>，在以HUB为中心设备时，即使网络中某条线路产生了故障，并不影响其它线路的工作。所以HUB在<a href="https://baike.baidu.com/item/%E5%B1%80%E5%9F%9F%E7%BD%91" target="_blank" rel="external">局域网</a>中得到了广泛的应用。大多数的时候它用在星型与<a href="https://baike.baidu.com/item/%E6%A0%91%E5%9E%8B%E7%BD%91%E7%BB%9C" target="_blank" rel="external">树型网络</a>拓扑结构中，以RJ45接口与各主机相连（也有<a href="https://baike.baidu.com/item/BNC%E6%8E%A5%E5%8F%A3" target="_blank" rel="external">BNC接口</a>），HUB按照不同的说法有很多种类。 HUB按照对输入信号的处理方式上，可以分为无源HUB、有源HUB、智能HUB。</p>
<hr>
<h2 id="磁盘阵列"><a href="#磁盘阵列" class="headerlink" title="磁盘阵列"></a>磁盘阵列</h2><p><a href="https://baike.baidu.com/item/磁盘阵列" target="_blank" rel="external">百度百科</a></p>
<p>磁盘阵列（Redundant Arrays of Independent Disks，RAID），有“独立磁盘构成的具有冗余能力的阵列”之意。</p>
<p>磁盘阵列是由很多价格较便宜的<a href="https://baike.baidu.com/item/%E7%A3%81%E7%9B%98" target="_blank" rel="external">磁盘</a>，组合成一个容量巨大的磁盘组，利用个别磁盘提供数据所产生加成效果提升整个磁盘系统效能。利用这项技术，将数据切割成许多区段，分别存放在各个硬盘上。</p>
<p>磁盘阵列还能利用同位检查（Parity Check）的观念，在<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84" target="_blank" rel="external">数组</a>中任意一个<a href="https://baike.baidu.com/item/%E7%A1%AC%E7%9B%98%E6%95%85%E9%9A%9C" target="_blank" rel="external">硬盘故障</a>时，仍可读出数据，在数据重构时，将数据经计算后重新置入新硬盘中。</p>
<hr>
<h2 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h2><p><a href="https://baike.baidu.com/item/堡垒机" target="_blank" rel="external">百度百科</a></p>
<p>堡垒机，即在一个特定的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83" target="_blank" rel="external">网络环境</a>下，为了保障网络和数据不受来自外部和内部用户的入侵和破坏，而运用各种技术手段实时收集和监控网络环境中每一个组成部分的系统状态、安全事件、网络活动，以便集中<a href="https://baike.baidu.com/item/%E6%8A%A5%E8%AD%A6" target="_blank" rel="external">报警</a>、及时处理及<a href="https://baike.baidu.com/item/%E5%AE%A1%E8%AE%A1/2140835" target="_blank" rel="external">审计</a>定责。</p>
<h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>随着企事业单位IT系统的不断发展，网络规模和设备数量迅速扩大，日趋复杂的IT系统与不同背景的运维人员的行为给信息系统安全带来较大风险，主要表现在：</p>
<ol>
<li>多个用户使用同一个账号。这种情况主要出现在同一工作组中，由于工作需要，同时系统管理账号唯一，因此只能多用户共享同一账号。如果发生安全事故，不仅难以定位账号的实际使用者和责任人，而且无法对账号的使用范围进行有效控制，存在较大安全风险和隐患。</li>
</ol>
<ol>
<li><p>一个用户使用多个账号。目前，一个维护人员使用多个账号是较为普遍的情况，用户需要记忆多套口令同时在多套主机系统、网络设备之间切换，降低工作效率，增加工作复杂度。如下图所示：</p>
<p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="https://ws2.sinaimg.cn/large/006tNc79gy1fmuei2zoarj306405faa3.jpg" width="50%;"><br></p>
</li>
<li><p>缺少统一的权限管理平台，权限管理日趋繁重和无序；而且维护人员的权限大多是粗放管理，无法基于最小权限分配原则的用户权限管理，难以实现更细粒度的命令级权限控制，系统安全性无法充分保证。</p>
</li>
<li>无法制定统一的访问审计策略，审计粒度粗。各网络设备、主机系统、数据库是分别单独审计记录访问行为，由于没有统一审计策略，并且各系统自身审计日志内容深浅不一，难以及时通过系统自身审计发现违规操作行为和追查取证。</li>
<li>传统的网络安全审计系统无法对维护人员经常使用的SSH、RDP等加密、图形操作协议进行内容审计。</li>
</ol>
<h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><h4 id="单点登录功能"><a href="#单点登录功能" class="headerlink" title="单点登录功能"></a>单点登录功能</h4><p>支持对X11、linux、unix、数据库、网络设备、安全设备等一系列授权账号进行密码的自动化周期更改，简化密码管理，让使用者无需记忆众多系统密码，即可实现自动登录目标设备，便捷安全。[1]<a href=""> </a></p>
<h4 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h4><p>设备支持统一账户管理策略，能够实现对所有服务器、网络设备、安全设备等账号进行集中管理，完成对账号整个生命周期的监控，并且可以对设备进行特殊角色设置如：<a href="https://baike.baidu.com/item/%E5%AE%A1%E8%AE%A1/2140835" target="_blank" rel="external">审计</a>巡检员、<a href="https://baike.baidu.com/item/%E8%BF%90%E7%BB%B4" target="_blank" rel="external">运维</a>操作员、<a href="https://baike.baidu.com/item/%E8%AE%BE%E5%A4%87" target="_blank" rel="external">设备</a>管理员等自定义设置，以满足审计需求</p>
<h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><p>设备提供统一的认证接口，对用户进行认证，支持身份认证模式包括 动态口令、静态密码、硬件key 、生物特征等多种认证方式，设备具有灵活的定制接口，可以与其他第三方认证服务器之间结合；安全的认证模式，有效提高了认证的安全性和可靠性。</p>
<h4 id="资源授权"><a href="#资源授权" class="headerlink" title="资源授权"></a>资源授权</h4><p>设备提供基于用户、目标设备、时间、协议类型<a href="https://baike.baidu.com/item/IP/224599" target="_blank" rel="external">IP</a>、行为等要素实现细粒度的操作授权，最大限度保护用户资源的安全</p>
<h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>设备支持对不同用户进行不同策略的制定，细粒度的访问控制能够最大限度的保护用户资源的安全，严防非法、越权访问事件的发生。</p>
<h4 id="操作审计"><a href="#操作审计" class="headerlink" title="操作审计"></a>操作审计</h4><p>设备能够对<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E4%B8%B2" target="_blank" rel="external">字符串</a>、<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2/773307" target="_blank" rel="external">图形</a>、<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93" target="_blank" rel="external">文件传输</a>、<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="external">数据库</a>等全程操作行为审计；通过设备录像方式实时监控运维人员对操作系统、安全设备、网络设备、数据库等进行的各种操作，对违规行为进行事中控制。对终端指令信息能够进行精确搜索，进行录像精确定位。[2]<a href=""> </a></p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
            <tag> 服务器虚拟化 </tag>
            
            <tag> 堡垒机 </tag>
            
            <tag> 磁盘阵列 </tag>
            
            <tag> 交换机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript闭包]]></title>
      <url>/2017/12/21/javascriptClosure/</url>
      <content type="html"><![CDATA[<p>对于JavaScript的程序员来说，闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="external">MDN Closures</a></p>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>变量的作用域无非就是两种：全局变量和局部变量。当在函数中声明一个变量的时候，如果用关键字<code>var</code>来声明此变量，那么它就是局部变量，如果没有<code>var</code>那么就会成为全局变量。一般不建议用这种方式定义全局变量。而是用<code>var</code>将变量声明在函数的外面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'小张'</span>;  <span class="comment">// 全局变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'小明'</span>;  <span class="comment">// 局部变量</span></div><div class="line">    age = <span class="number">12</span>;  <span class="comment">// 全局变量，建议少用这种全局变量的定义方式</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在JavaScript中，函数可以用来创造函数作用域。函数内部可以看到外面的变量，而外面看不到函数里的变量。这是因为当在函数中搜索一个变量的时候，如果该函数内没有声明这个变量，那么此次搜索的过程会随着代码执行环境创建的作用域链往外层逐层搜索，直到搜索到全局变量为止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> func2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> c = <span class="number">3</span>;</div><div class="line">        <span class="built_in">console</span>.log( b );  <span class="comment">// 2</span></div><div class="line">        <span class="built_in">console</span>.log( a );  <span class="comment">// 1</span></div><div class="line">    &#125; </div><div class="line">    func2();</div><div class="line">    <span class="built_in">console</span>.log( c );  <span class="comment">// 报错：c is not defined</span></div><div class="line">&#125;;</div><div class="line">func1();</div></pre></td></tr></table></figure>
<p>那么能不能从函数外部来访问局部变量呢？答案是可以。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> number = <span class="number">6</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> number;</div><div class="line">    &#125; </div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log( func()() );  <span class="comment">// 6</span></div></pre></td></tr></table></figure>
<h2 id="变量的生存周期"><a href="#变量的生存周期" class="headerlink" title="变量的生存周期"></a>变量的生存周期</h2><p>全局变量的生存周期是永久的，除非我们主动的销毁这个全局变量。而对于局部变量来说，当退出函数时，这些局部变量就失去了生存的环境，所以会随着函数调用的结束而被销毁。<br>那么是否可以让局部变量在函数调用结束的时候不被销毁呢？来看下面这个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        a++;</div><div class="line">        <span class="built_in">console</span>.log( a );</div><div class="line">    &#125;  </div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> f = func();</div><div class="line">f();  <span class="comment">// 2</span></div><div class="line">f();  <span class="comment">// 3</span></div><div class="line">f();  <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<p>从上面这个输出结果，我们可以看到局部变量a并没有随着f()的调用而被销毁。这是因为全局变量f保存着对func里面匿名函数的引用。而这个匿名函数是可以访问到局部变量a的，所以自然a也被保存下来了。所以这种情况下局部变量的生存周期就得以延续。上面这个匿名函数其实就是一个闭包。再来看一个闭包的经典应用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设有5个div</span></div><div class="line"><span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName( <span class="string">'div'</span> );</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = nodes.length; i &lt; l; i++ ) &#123;</div><div class="line">    nodes[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( i );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当真正执行这段代码的时候，发现无论点击那个div，最后打印的结果都是4。这是因为onclick事件是异步触发的，当事件触发的时候，for循环早已经结束，此时变量i的值已经是4。解决方案可以是用闭包把每次的i都保存起来：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = nodes.length; i &lt; l; i++ ) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"> i </span>) </span>&#123;</div><div class="line">        nodes[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log( i );</div><div class="line">        &#125;</div><div class="line">    &#125;)( i );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同理，我们编写一段代码用来判断对象类型：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Type = &#123;&#125;;</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, type; type = [ <span class="string">'String'</span>, <span class="string">'Array'</span>, <span class="string">'Number'</span> ][ i++ ]; ) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"> type </span>) </span>&#123;</div><div class="line">        Type[ <span class="string">'is'</span> + type ] = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">'[object '</span> + type + <span class="string">']'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)( type );</div><div class="line">&#125;</div><div class="line">Type.isArray( [] );  <span class="comment">// true</span></div><div class="line">Type.isString( <span class="string">'str'</span> );  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>官方的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因为这些变量也是该表达式的一部分。这个概念不好理解，我们可以简单得理解成闭包就是能够访问函数内部变量的函数。</p>
<h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><ul>
<li><p>可以在函数外部访问在函数内部定义的局部变量</p>
</li>
<li><p>延续局部变量的生存周期</p>
</li>
<li><p>封装变量<br>闭包可以帮助把一些不需要暴露在全局的变量封装成“私有变量”。假设有一个计算乘积的函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span>  a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ ) &#123;</div><div class="line">        a = a * <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;;</div><div class="line">mult(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);  <span class="comment">// 24</span></div></pre></td></tr></table></figure>
<p>mult函数接受一些<code>Number</code>类型的参数，并且返回他们的乘积。现再我们觉得对于那些相同参数来说，每次再进行计算是一种浪费，所以我们决定加入缓存机制来提高函数性能：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call( <span class="built_in">arguments</span>, <span class="string">''</span> );</div><div class="line">    <span class="keyword">if</span> ( cache[ args ] ) &#123;</div><div class="line">        <span class="keyword">return</span> cache[ args ];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span>  a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ ) &#123;</div><div class="line">        a = a * <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cache[ args ] = a;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们看到cache这个变量仅仅在mult函数中被使用，所以为了避免cache污染全局变量，我们将它放到mult函数里面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call( <span class="built_in">arguments</span>, <span class="string">''</span> );</div><div class="line">        <span class="keyword">if</span> ( cache[ args ] ) &#123;</div><div class="line">            <span class="keyword">return</span> cache[ args ];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span>  a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ ) &#123;</div><div class="line">           a = a * <span class="built_in">arguments</span>[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cache[ args ] = a;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>提炼函数是代码重构中的一种常见技巧。如果在一个大函数中有一些代码块能够独立出来，我们常常把这些代码块封装在独立的小函数里面。独立出来的小函数有利于代码的复用，如果这些小函数有一个良好的命名，那么它们本身就起到了一个很好的注释作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span>  a = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ ) &#123;</div><div class="line">           a = a * <span class="built_in">arguments</span>[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call( <span class="built_in">arguments</span>, <span class="string">''</span> );</div><div class="line">        <span class="keyword">if</span> ( cache[ args ] ) &#123;</div><div class="line">            <span class="keyword">return</span> cache[ args ];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cache[ args ] = calculate.apply( <span class="literal">null</span>, <span class="built_in">arguments</span> );</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="闭包与内存管理"><a href="#闭包与内存管理" class="headerlink" title="闭包与内存管理"></a>闭包与内存管理</h2><p>局部变量本来应该在函数退出的时候就被结束引用，但如果局部变量被封装在闭包形成的环境中，那么这个局部变量就能一直生存下去。从这个意义上来看，闭包确实会使一些数据无法被及时销毁。如果将来需要回收这些变量，我们可以手动把这些变量设为<code>null</code>。<br>跟闭包和内存泄露有关系的地方是，使用闭包的同时比较容易形成循环引用，如果闭包的作用域中保存着一些DOM节点，这个时候就有可能造成内存泄露。在IE9之前的浏览器中，由于BOM和DOM中的对象是使用C++对象以COM对象的方式实现的，而COM对象的垃圾收集机制采用的是引用计数策略。在基于引用计数的垃圾收集机制中，如果两个对象之间形成了循环引用，那么这两个对象都无法被回收。但我们只要把循环引用中的对象设为<code>null</code>即可解决这个问题。</p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>/2017/12/20/RegularExpression/</url>
      <content type="html"><![CDATA[<h2 id="PART-1-为什么使用正则表达式？"><a href="#PART-1-为什么使用正则表达式？" class="headerlink" title="PART 1-为什么使用正则表达式？"></a>PART 1-为什么使用正则表达式？</h2><ul>
<li><p>测试字符串内的模式</p>
<p>例如，可以测试输入字符串，以查看字符串内是否出现电话号码或信用卡号码模式。这称为数据验证</p>
</li>
<li><p>替换文本</p>
<p>可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它</p>
</li>
<li><p>基于模式匹配从字符串中提取子字符串</p>
<p>可以查找文档内或输入域内特定的文本</p>
<a id="more"></a>
</li>
</ul>
<h2 id="PART-2-练习正则表达式"><a href="#PART-2-练习正则表达式" class="headerlink" title="PART 2-练习正则表达式"></a>PART 2-练习正则表达式</h2><p>我们可以在console控制台，regexper 或者 <code>IDE</code> 去练习正则表达式</p>
<ul>
<li><p>推荐一个JS正则可视化的在线工具，简单易懂：<a href="https://regexper.com" target="_blank" rel="external">regexper.com</a></p>
<p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="/img/regexper.png" width="90%;"><br></p>
</li>
<li><p>现在大部分IDE都会支持正则表达式匹配，如sublime：</p>
<p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="/img/sublimeRegexper.png" width="90%;"><br></p>


</li>
</ul>
<hr>
<h2 id="PART-3-举个🌰"><a href="#PART-3-举个🌰" class="headerlink" title="PART 3-举个🌰"></a>PART 3-举个🌰</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<p>^[0-9]+abc$</p>
</blockquote>
<ul>
<li><code>^</code> 为匹配输入字符串的开始位置</li>
<li><code>[0-9]+</code> 匹配单个数字，<code>+</code> 匹配一个或者多个</li>
<li><code>abc$</code> 匹配字母 <code>abc</code> 结尾</li>
<li><code>$</code> 为匹配输入字符串的结束位置</li>
</ul>
<p>匹配以数字开头，并以abc结尾的字符串：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"123abc"</span>;</div><div class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/^[0-9]+abc$/</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));</div><div class="line"></div><div class="line">==&gt; <span class="number">123</span>ABC</div></pre></td></tr></table></figure>
<hr>
<h2 id="PART-4-基本正则字符"><a href="#PART-4-基本正则字符" class="headerlink" title="PART 4-基本正则字符"></a>PART 4-基本正则字符</h2><h3 id="基础字符含义"><a href="#基础字符含义" class="headerlink" title="基础字符含义"></a>基础字符含义</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">MDN Regular Expressions</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\</td>
<td>转意，即通常在”\”后面的字符不按原来意义解释，如/b/匹配字符”b”，当b前面加了反斜杠后/\b/，转意为匹配一个单词的边界。</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td>匹配输入的开始<br><br> 例如，/^A/ 并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。 当 ‘^’ 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#note" target="_blank" rel="external">补充字符集合</a>一节有详细介绍和示例。</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td>匹配输入的结束。 例如，/t$/ 并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td>匹配前面元字符0次或多次，<strong>/ba*/</strong> 将匹配b,ba,baa,baaa ，相当于{0, } <br><br> 例如，/bo*/会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中将不会匹配任何东西。</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td>匹配前面元字符1次或多次，/ba+/将匹配ba,baa,baaa，相当于{1, } <br><br>例如，/a+/匹配了在 “candy” 中的 ‘a’，和在 “caaaaaaandy” 中所有的 ‘a’。</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td>匹配前面元字符0次或1次，相当于 {0,1}<br><br> 例如，/e?le?/ 匹配 “angel” 中的 ‘el’，和 “angle” 中的 ‘le’ 以及”oslo’ 中的’l’<br><br> 如果<strong>紧跟在任何量词 *、 +、? 或 {} 的后面</strong>，将会使量词变为<strong>非贪婪</strong>的（匹配尽量少的字符），和缺省使用的<strong>贪婪模式</strong>（匹配尽可能多的字符）正好相反。<br><br> 例如，对 “123abc” 应用 /\d+/ 将会返回 “123”，如果使用 /\d+?/,那么就只会匹配到 “1”。<br> 还可以运用于先行断言，如本表的 <code>x(?=y)</code> 和 <code>x(?!y)</code> 条目中所述。</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td>匹配除换行符之外的任何单个字符<br><br> 例如，/.n/将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。</td>
</tr>
<tr>
<td style="text-align:center">x&#124;y</td>
<td>匹配x或y</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td>精确匹配n次</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td>匹配n次以上</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td>匹配n-m次</td>
</tr>
<tr>
<td style="text-align:center"><strong>[^xyz ]</strong></td>
<td>字符集(character set)，匹配这个集合中的任一一个字符(或元字符)</td>
</tr>
<tr>
<td style="text-align:center">[\b]</td>
<td>匹配一个退格符</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td>匹配一个单词的边界</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td>匹配一个非单词边界</td>
</tr>
<tr>
<td style="text-align:center">\cX</td>
<td>这儿，X是一个控制符，/\cM/匹配Ctrl-M</td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td>匹配一个数字，/\d/ = /[0-9]/</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td>匹配一个非字数字符，/\D/ = /[ ^0-9]/</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td>匹配一个空白字符，包括\n,\r,\f,\t,\v等</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td>匹配一个非空白字符，等于 /[ ^\n\f\r\t\v]/</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td>匹配一个重直制表符</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td>匹配字母或数字或下划线，等于[a-zA-Z_0-9] ( 能不能匹配汉字要视你的操作系统和你的应用环境而定</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td>匹配一个不可以组成单词的字符，如[\W]匹配”5.98”中的，等于 [ ^a-zA-Z0-9]</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="PART-5-使用正则表达式"><a href="#PART-5-使用正则表达式" class="headerlink" title="PART 5-使用正则表达式"></a>PART 5-使用正则表达式</h2><p>正则表达式可以被用于<code>RegExp</code>的<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="external"><code>exec</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/RegExp/test" target="_blank" rel="external"><code>test</code></a>方法以及 <a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String" target="_blank" rel="external"><code>String</code></a>的<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="external"><code>match</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="external"><code>replace</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String/search" target="_blank" rel="external"><code>search</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="external"><code>split</code></a>方法。这些方法在<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference" target="_blank" rel="external">JavaScript 手册</a>中有详细的解释。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>exec</code></td>
<td>一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。</td>
</tr>
<tr>
<td><code>test</code></td>
<td>一个在字符串中测试是否匹配的RegExp方法，它返回true或false。</td>
</tr>
<tr>
<td><code>match</code></td>
<td>一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。</td>
</tr>
<tr>
<td><code>search</code></td>
<td>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td>
</tr>
<tr>
<td><code>split</code></td>
<td>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[loading加载等待框]]></title>
      <url>/2017/11/30/loading/</url>
      <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li><a href="https://htmlpreview.github.io/?https://github.com/zc95/loading/blob/master/index.html" target="_blank" rel="external">demo地址</a></li>
<li><a href="https://github.com/zc95/loading" target="_blank" rel="external">github地址</a></li>
</ul>
<a id="more"></a>
<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><ul>
<li>LoadShow();</li>
<li>LoadHide();</li>
</ul>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadShow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ($(<span class="string">"#loading_wrapper"</span>).length &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> str = <span class="string">"&lt;div id='loading_wrapper' class='loaders_wrapper'&gt;&lt;div class='loader'&gt;&lt;div class='loader-inner ball-spin-fade-loader'&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;"</span>;</div><div class="line">  $(<span class="string">"body"</span>).append(str);</div><div class="line">  $(<span class="string">"#loading_wrapper"</span>).show();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadHide</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">"#loading_wrapper"</span>).hide().remove();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*在线预览等待框*/</span></div><div class="line"><span class="selector-class">.loaders_wrapper</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=50);</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0.4</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">'Source Sans Pro'</span>;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">99999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.loaders_wrapper</span> <span class="selector-class">.loader</span> &#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">70px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">35px</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">35px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> ball-spin-fade-loader &#123;</div><div class="line">  50% &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0.3</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.4);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.4);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> ball-spin-fade-loader &#123;</div><div class="line">  50% &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0.3</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.4);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.4);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</div><div class="line">  <span class="attribute">top</span>: <span class="number">25px</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">-webkit-animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0s</span> infinite linear;</div><div class="line">  <span class="attribute">animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line">  <span class="attribute">top</span>: <span class="number">17.04545px</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">17.04545px</span>;</div><div class="line">  <span class="attribute">-webkit-animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.12s</span> infinite linear;</div><div class="line">  <span class="attribute">animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.12s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">25px</span>;</div><div class="line">  <span class="attribute">-webkit-animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.24s</span> infinite linear;</div><div class="line">  <span class="attribute">animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.24s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</div><div class="line">  <span class="attribute">top</span>: -<span class="number">17.04545px</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">17.04545px</span>;</div><div class="line">  <span class="attribute">-webkit-animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.36s</span> infinite linear;</div><div class="line">  <span class="attribute">animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.36s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</div><div class="line">  <span class="attribute">top</span>: -<span class="number">25px</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">-webkit-animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.48s</span> infinite linear;</div><div class="line">  <span class="attribute">animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.48s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</div><div class="line">  <span class="attribute">top</span>: -<span class="number">17.04545px</span>;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">17.04545px</span>;</div><div class="line">  <span class="attribute">-webkit-animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.6s</span> infinite linear;</div><div class="line">  <span class="attribute">animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.6s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(7)</span> &#123;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">25px</span>;</div><div class="line">  <span class="attribute">-webkit-animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.72s</span> infinite linear;</div><div class="line">  <span class="attribute">animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.72s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(8)</span> &#123;</div><div class="line">  <span class="attribute">top</span>: <span class="number">17.04545px</span>;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">17.04545px</span>;</div><div class="line">  <span class="attribute">-webkit-animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.84s</span> infinite linear;</div><div class="line">  <span class="attribute">animation</span>: ball-spin-fade-loader <span class="number">1s</span> <span class="number">0.84s</span> infinite linear;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ball-spin-fade-loader</span> &gt; <span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span><span class="meta">!important</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">2px</span>;</div><div class="line">  <span class="attribute">-webkit-animation-fill-mode</span>: both;</div><div class="line">  <span class="attribute">animation-fill-mode</span>: both;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*在线预览等待框*/</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用最简单的代码实现点击查看大图]]></title>
      <url>/2017/11/29/enlargeImg/</url>
      <content type="html"><![CDATA[<p>今天做了个点击查看大图的功能，只需要给img加一个class，不用写额外的html代码</p>
<p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="/img/enlargeImg.png" width="90%;"><br></p>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li><a href="https://htmlpreview.github.io/?https://github.com/zc95/enlargeImg/blob/master/index.html" target="_blank" rel="external">demo地址</a></li>
<li><a href="https://github.com/zc95/enlargeImg" target="_blank" rel="external">github地址</a><a id="more"></a>
<h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2></li>
</ul>
<h3 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"enlargeImg"</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">src</span>=<span class="string">"https://zc95.github.io/img/avatar.png"</span></span></div><div class="line"><span class="tag"><span class="attr">title</span>=<span class="string">"点击查看大图"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>重点：</p>
<ul>
<li>img标签</li>
<li>class=”enlargeImg”</li>
<li>限制图片宽度或高度为”小图片”，width=”80”</li>
<li>src有值</li>
<li>title=”点击查看大图”</li>
</ul>
<h3 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.enlargeImg_wrapper</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">  <span class="attribute">position</span>: fixed;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">  <span class="attribute">background-attachment</span>: fixed;</div><div class="line">  <span class="attribute">background-position</span>: center;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(52, 52, 52, 0.8);</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>,</div><div class="line"><span class="selector-class">.enlargeImg_wrapper</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重点：</p>
<ul>
<li>半透明遮罩层 background-color: rgba(52, 52, 52, 0.8);</li>
<li>水平垂直居中 background-position: center;</li>
<li>放大后的图片大小 background-size: 50%;</li>
<li>如果受页面中别的定位元素的z-index影响，改z-index的值就行</li>
</ul>
<h3 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  enlargeImg();</div><div class="line">&#125;)</div><div class="line"><span class="comment">//查看大图</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">enlargeImg</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">".enlargeImg"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).after(<span class="string">"&lt;div onclick='closeImg()' class='enlargeImg_wrapper'&gt;&lt;/div&gt;"</span>);</div><div class="line">    <span class="keyword">var</span> imgSrc = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>);</div><div class="line">    $(<span class="string">".enlargeImg_wrapper"</span>).css(<span class="string">"background-image"</span>, <span class="string">"url("</span> + imgSrc + <span class="string">")"</span>);</div><div class="line">    $(<span class="string">'.enlargeImg_wrapper'</span>).fadeIn(<span class="number">200</span>);</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//关闭并移除图层</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeImg</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.enlargeImg_wrapper'</span>).fadeOut(<span class="number">200</span>).remove();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重点：</p>
<ul>
<li>点击class为 <code>enlargeImg</code> 的图片时获取它的路径，var imgSrc = $(this).attr(‘src’);</li>
<li>创建遮罩层，$(this).after(“<div onclick="closeImg()" class="enlargeImg_wrapper"></div>“);</li>
<li>赋值给 <code>enlargeImg_wrapper</code> ，$(“.enlargeImg_wrapper”).css(“background-image”, “url(“ + imgSrc + “)”);</li>
<li>关闭遮罩层时移除遮罩层，$(‘.enlargeImg_wrapper’).fadeOut(200).remove();</li>
</ul>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[更改hosts文件来更好地使用github]]></title>
      <url>/2017/11/28/hostsChange/</url>
      <content type="html"><![CDATA[<p>最近可能是网不太好，hexo d的时候总是提交不了，很苦恼，试了n多种方法。。。</p>
<h2 id="hexo-d时报错"><a href="#hexo-d时报错" class="headerlink" title="hexo d时报错"></a>hexo d时报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fatal: unable to access<span class="string">'https://github.com/zc95/zc95.github.io.git/ '</span>: Could not</div><div class="line">resolve host: github.com</div><div class="line">FATAL Something<span class="string">'s wrong.Maybe you can find the solution here:http:hexo.io/docs/troubleshooting.html</span></div><div class="line"><span class="string">...</span></div></pre></td></tr></table></figure>
<h2 id="命令行终端-ping-github-com"><a href="#命令行终端-ping-github-com" class="headerlink" title="命令行终端 ping github.com"></a>命令行终端 ping github.com</h2><p>打开命令行终端，输入 <code>ping github.com</code> 并回车</p>
<blockquote>
<p>ping github.com</p>
</blockquote>
<a id="more"></a>
<p>如果像下面这样ping不出，就继续往下看吧</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ping github.com</div><div class="line">PING github.com (192.30.255.113): 56 data bytes</div><div class="line">Request timeout</div><div class="line">Request timeout <span class="keyword">for</span> icmp_seq 0</div><div class="line">Request timeout <span class="keyword">for</span> icmp_seq 1</div><div class="line">Request timeout <span class="keyword">for</span> icmp_seq 2</div><div class="line">Request timeout <span class="keyword">for</span> icmp_seq 3</div><div class="line">Request timeout <span class="keyword">for</span> icmp_seq 4</div><div class="line">Request timeout <span class="keyword">for</span> icmp_seq 5</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="Ping-github-com"><a href="#Ping-github-com" class="headerlink" title="Ping github.com"></a>Ping github.com</h2><ol>
<li>打开链接 <a href="http://ping.chinaz.com" target="_blank" rel="external">http://ping.chinaz.com</a> 输入 <code>github.com</code> ,点击Ping检测</li>
<li>选择一条TTL值最小的ip地址，例如：<code>192.30.255.113</code> </li>
</ol>
<h2 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h2><ol>
<li>点击Finder - 前往 - 前往文件夹… - 输入 <code>/etc/hosts</code> 点击前往</li>
<li>找到hosts文件，修改hosts文件需要管理员权限，所以不能单纯修改，先按住hosts文件拖到桌面，双击打开桌面上的hosts文件</li>
<li>在 <code>127.0.0.1 localhost</code> 下面另起一行输入 <code>192.30.255.113 github.com</code> ，保存并退出</li>
<li>将桌面的hosts文件拖回直原来的位置，他会提示你 <strong>修改”etc”需要管理员密码</strong> ，点击”鉴定”，会提示你是否覆盖原文件，点击”是”，输入密码或指纹，ok了</li>
<li>再次在命令行终端  <code>ping github.com</code>  就能看到ping成功了</li>
<li>可以愉快的deploy了</li>
</ol>
<hr>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="什么是hosts？"><a href="#什么是hosts？" class="headerlink" title="什么是hosts？"></a>什么是hosts？</h3><blockquote>
<p>Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D" target="_blank" rel="external">域名</a>与其对应的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80" target="_blank" rel="external">IP地址</a>建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从<a href="https://baike.baidu.com/item/Hosts%E6%96%87%E4%BB%B6" target="_blank" rel="external">Hosts文件</a>中寻找对应的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80" target="_blank" rel="external">IP地址</a>，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90" target="_blank" rel="external">域名解析</a>服务器进行IP地址的解析。</p>
</blockquote>
<h3 id="每次改完配置需要重启机器吗？"><a href="#每次改完配置需要重启机器吗？" class="headerlink" title="每次改完配置需要重启机器吗？"></a>每次改完配置需要重启机器吗？</h3><blockquote>
<p>不需要，它实质上是个文本文件，当计算机需要解析地址时，会首先检查此文件，读取后再确定是本地解析还是要发送到DNS服务器来解析。<br>改后，只要再上网，就会生效。</p>
</blockquote>
<h3 id="hosts文件在哪里"><a href="#hosts文件在哪里" class="headerlink" title="hosts文件在哪里?"></a>hosts文件在哪里?</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">Linux:</span><span class="regexp">/etc/</span>hosts</div><div class="line">Mac OS <span class="string">X:</span><span class="regexp">/etc/</span>hosts</div><div class="line"><span class="string">Android:</span><span class="regexp">/etc/</span>hosts</div><div class="line"><span class="string">Windows:</span><span class="string">C:</span><span class="regexp">/windows/</span>System32<span class="regexp">/drivers/</span>etc/hosts</div></pre></td></tr></table></figure>
<h3 id="hosts文件规则"><a href="#hosts文件规则" class="headerlink" title="hosts文件规则?"></a>hosts文件规则?</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ip</span>地址           域名</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>	     <span class="selector-tag">localhost</span></div><div class="line">192<span class="selector-class">.30</span><span class="selector-class">.255</span><span class="selector-class">.113</span>   <span class="selector-tag">github</span><span class="selector-class">.com</span></div><div class="line">255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.255</span>	 <span class="selector-tag">broadcasthost</span></div><div class="line"><span class="selector-pseudo">::1</span>              <span class="selector-tag">localhost</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hosts </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于float清除浮动和inline-block出现空隙的问题]]></title>
      <url>/2017/11/26/floatAndInlineBlock/</url>
      <content type="html"><![CDATA[<p>最近在写项目的时候手写了一个简单选项卡，遇到这类布局，最常见、最快速的布局方式就是display:inline-block;和float:left; </p>
<p></p><p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="/img/inlineBlockKX.png" width="90%;"><br></p><br>但我们都知道 <code>display:inline-block</code> 布局会出现空隙的问题，<code>float:left</code>  又要清除浮动，本文就这两个问题整理出解决方案。<br><a id="more"></a><p></p>
<h2 id="display-inline-block去掉空隙"><a href="#display-inline-block去掉空隙" class="headerlink" title="display:inline-block去掉空隙"></a>display:inline-block去掉空隙</h2><h3 id="移除标签间的空格"><a href="#移除标签间的空格" class="headerlink" title="移除标签间的空格"></a>移除标签间的空格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tab-wrapper"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item active"</span>&gt;</span>项目一<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目二<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目三<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个方法是我最初学html时知道的方法，当时觉得挺方便的，现在工作了觉得这个方法好蠢😂，一个代码格式化就能毁了它，这样不易维护的代码太脆弱了；</p>
<h3 id="去掉闭合标签"><a href="#去掉闭合标签" class="headerlink" title="去掉闭合标签"></a>去掉闭合标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tab-wrapper"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item active"</span>&gt;</span>项目一</div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目二</div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目三</div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目四</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个方法算是种好方法，最后一个li的闭合标签可有可无，也能很好的解决空隙问题，但依然还是代码不易维护的问题。</p>
<h3 id="font-size-0"><a href="#font-size-0" class="headerlink" title="font-size:0;"></a>font-size:0;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tab-wrapper"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item active"</span>&gt;</span>项目一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tab-item"</span>&gt;</span>项目四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.tab-wrapper</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">0</span>; <span class="comment">/*父容器font-size为0*/</span></div><div class="line">  <span class="attribute">-webkit-text-size-adjust</span>:none; <span class="comment">/*Chrome有最小字体大小限制，考虑到兼容性需要取消字体大小限制*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.tab-wrapper</span> <span class="selector-class">.tab-item</span>&#123;</div><div class="line">  <span class="attribute">display</span>:inline-block;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">13px</span>; <span class="comment">/*这里比较重要，因为子元素会继承父元素的字体大小，这里要恢复正常font-size*/</span></div><div class="line">  <span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法方法好理解，比较主流的解决方案；</p>
<h2 id="float-清除浮动"><a href="#float-清除浮动" class="headerlink" title="float 清除浮动"></a>float 清除浮动</h2><h3 id="空标签"><a href="#空标签" class="headerlink" title="空标签 "></a>空标签 <div style="clear:both;"></div></h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class="box-wrapper"&gt;</div><div class="line">    &lt;div class="box"&gt;&lt;/div&gt;</div><div class="line">    &lt;div class="box"&gt;&lt;/div&gt;</div><div class="line">    &lt;div class="box"&gt;&lt;/div&gt;</div><div class="line">    &lt;div style="clear:both;"&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="最佳方法"><a href="#最佳方法" class="headerlink" title="最佳方法"></a>最佳方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 全浏览器通用的clearfix方案【推荐 */</span></div><div class="line"><span class="comment">/* 引入了zoom以支持IE6/7 */</span></div><div class="line"><span class="comment">/* 同时加入:before以解决现代浏览器上边距折叠的问题 */</span></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span>&#123;</div><div class="line">    *zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于 GitHub Issues 的评论系统：gitment]]></title>
      <url>/2017/11/23/gitment/</url>
      <content type="html"><![CDATA[<h2 id="如何为hexo博客添加评论功能"><a href="#如何为hexo博客添加评论功能" class="headerlink" title="如何为hexo博客添加评论功能"></a>如何为<a href="https://zc95.github.io/2017/10/20/hexoBlog/">hexo</a>博客添加评论功能</h2><p>多说、友言、Disqus、livere(来比力)、gitment、畅言、valine基本都可以实现，但有些已经关闭，有些需要翻墙</p>
<p>本文讲的是一款基于 GitHub Issues 的评论系统：gitment 。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown语法 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="gitment"><a href="#gitment" class="headerlink" title="gitment"></a>gitment</h2><h3 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h3><p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="/img/gitmentPC.png" width="90%;"><br></p>        



<hr>
<h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="/img/gitmentYD.png" width="90%;"><br></p>

<hr>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>打开博客主题文件夹下的 <code>_config.yml</code> 文件，以我的为例：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">comment:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">gitment</span>  <span class="comment"># 启用哪种评论系统</span></div><div class="line"><span class="attr">  gitment:</span></div><div class="line"><span class="attr">    githubID:</span> <span class="string">zc95</span>  <span class="comment"># 你的GitHub名称</span></div><div class="line"><span class="attr">    repo:</span> <span class="string">zc95.github.io</span>  <span class="comment"># 你的GitHub名称.github.io</span></div><div class="line"><span class="attr">    ClientID:</span> <span class="string">*********</span></div><div class="line"><span class="attr">    ClientSecret:</span> <span class="string">*********</span></div><div class="line"><span class="attr">    lazy:</span> <span class="literal">false</span>   <span class="comment"># 这个我也不清楚 大概是懒加载的意思吧</span></div></pre></td></tr></table></figure>
<p><code>githubID</code> 和 <code>repo</code> 都有了，就剩 <code>ClientID</code> 和 <code>ClientSecret</code> 了</p>
<hr>
<h2 id="注册OAuth-Application"><a href="#注册OAuth-Application" class="headerlink" title="注册OAuth Application"></a>注册OAuth Application</h2><p>通过地址<a href="https://github.com/settings/applications/new" target="_blank" rel="external">OAuth Application注册传送门</a>申请配置，注册一个新的 OAuth Application，其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <a href="https://zc95.github.io">https://zc95.github.io</a>）</p>
<p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="/img/OAuthApplication.png" width="90%;"><br></p>

<hr>
<h2 id="获取ClientID与ClientSecret"><a href="#获取ClientID与ClientSecret" class="headerlink" title="获取ClientID与ClientSecret"></a>获取ClientID与ClientSecret</h2><p style="text-align:center;"><br><img style="box-shadow:1px 1px 10px #888888;" src="/img/OAuthApplicationId.png" width="90%;"><br></p>


<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>优点<ul>
<li>界面​简洁</li>
<li>与github绑定，方便注册，不用依赖脚本或插件</li>
<li>评论会出现在github项目中的Issues里，方便管理</li>
<li>支持Markdown全部语法和html标签（这个很厉害）</li>
</ul>
</li>
<li>缺点<ul>
<li>​每篇文章都需要手动点击initialize comments按钮来初始化评论，否则不能评论；</li>
<li>不支持图片（可以尝试用markdown或者img标签来实现）和表情（emoji可以用）</li>
<li>只能支持github登陆</li>
</ul>
</li>
</ul>
<hr>
<h2 id="最后更新"><a href="#最后更新" class="headerlink" title="最后更新"></a>最后更新</h2><p>最后还是选择了<a href="https://livere.com" target="_blank" rel="external">livere 来必力</a>，注册登陆需要翻墙（或许因为我网不好。。），一旦注册之后评论之类的就不需翻墙了，支持QQ、微信、微博、百度等登陆方式，本页拉到最底下就是来必力了，体验还是可以的。</p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> gitment </tag>
            
            <tag> Issues </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的收藏]]></title>
      <url>/2017/11/21/Collection/</url>
      <content type="html"><![CDATA[<h2 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h2><h3 id="https-zc95-github-io"><a href="#https-zc95-github-io" class="headerlink" title="https://zc95.github.io"></a><a href="https://zc95.github.io">https://zc95.github.io</a></h3><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="jsrun在线代码编辑"><a href="#jsrun在线代码编辑" class="headerlink" title="jsrun在线代码编辑"></a><a href="http://jsrun.net" target="_blank" rel="external">jsrun在线代码编辑</a></h3><h3 id="tinypng压缩图片"><a href="#tinypng压缩图片" class="headerlink" title="tinypng压缩图片"></a><a href="https://tinypng.com" target="_blank" rel="external">tinypng压缩图片</a></h3><h3 id="Google翻译"><a href="#Google翻译" class="headerlink" title="Google翻译"></a><a href="https://translate.google.cn" target="_blank" rel="external">Google翻译</a></h3><h3 id="msdn-itellyou"><a href="#msdn-itellyou" class="headerlink" title="msdn.itellyou"></a><a href="https://msdn.itellyou.cn" target="_blank" rel="external">msdn.itellyou</a></h3><h3 id="MDN文档"><a href="#MDN文档" class="headerlink" title="MDN文档"></a><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external">MDN文档</a></h3><a id="more"></a>
<h2 id="前端插件-amp-框架"><a href="#前端插件-amp-框架" class="headerlink" title="前端插件&amp;框架"></a>前端插件&amp;框架</h2><h3 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a><a href="hhttp://www.echartsjs.com" target="_blank" rel="external">echarts</a></h3><h3 id="layui"><a href="#layui" class="headerlink" title="layui"></a><a href="http://www.layui.com" target="_blank" rel="external">layui</a></h3><h3 id="阿里巴巴矢量图标图"><a href="#阿里巴巴矢量图标图" class="headerlink" title="阿里巴巴矢量图标图"></a><a href="http://www.iconfont.cn" target="_blank" rel="external">阿里巴巴矢量图标图</a></h3><h2 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h2><h3 id="freecodecamp"><a href="#freecodecamp" class="headerlink" title="freecodecamp"></a><a href="https://www.freecodecamp.cn" target="_blank" rel="external">freecodecamp</a></h3><h3 id="慕课网"><a href="#慕课网" class="headerlink" title="慕课网"></a><a href="https://www.imooc.com" target="_blank" rel="external">慕课网</a></h3><h3 id="前端菜鸟教程"><a href="#前端菜鸟教程" class="headerlink" title="前端菜鸟教程"></a><a href="http://www.runoob.com" target="_blank" rel="external">前端菜鸟教程</a></h3>]]></content>
      
        <categories>
            
            <category> 汇总篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> 前端必备 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组复习]]></title>
      <url>/2017/11/21/arrayReview/</url>
      <content type="html"><![CDATA[<h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> ary); <span class="comment">//输出结果是Object</span></div></pre></td></tr></table></figure>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(ary <span class="keyword">instanceof</span> <span class="built_in">Array</span>)<span class="comment">//true;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="原型链方法"><a href="#原型链方法" class="headerlink" title="原型链方法"></a>原型链方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(ary.__proto__.constructor==<span class="built_in">Array</span>);<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(ary.constructor==<span class="built_in">Array</span>)<span class="comment">//true 这两段代码是一样的</span></div></pre></td></tr></table></figure>
<blockquote>
<p>以上三种方法都不太好，<code>instanceof</code> 和 <code>constructor</code> 判断的变量，必须在当前页面声明的，比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个arr，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false；</p>
</blockquote>
<h3 id="正确方法"><a href="#正确方法" class="headerlink" title="正确方法"></a>正确方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">e</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(e)==<span class="string">'[object Array]'</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(isArray(ary));</div></pre></td></tr></table></figure>
<h3 id="自己封装的基本数据类型验证"><a href="#自己封装的基本数据类型验证" class="headerlink" title="自己封装的基本数据类型验证"></a>自己封装的基本数据类型验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> type = &#123;</div><div class="line">  isObj: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) == <span class="string">"[object Object]"</span>;</div><div class="line">  &#125;,</div><div class="line">  isArray: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) == <span class="string">"[object Array]"</span>;</div><div class="line">  &#125;,</div><div class="line">  isNull: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) == <span class="string">"[object Null]"</span>;</div><div class="line">  &#125;,</div><div class="line">  isUndefined: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) == <span class="string">"[object Undefined]"</span>;</div><div class="line">  &#125;,</div><div class="line">  isBoolean: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) == <span class="string">"[object Boolean]"</span>;</div><div class="line">  &#125;,</div><div class="line">  isString: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) == <span class="string">"[object String]"</span>;</div><div class="line">  &#125;,</div><div class="line">  isNumber: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) == <span class="string">"[object Number]"</span>;</div><div class="line">  &#125;,</div><div class="line">  isDocument: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) == <span class="string">"[object Document]"</span> || <span class="string">"[object HTMLDocument]"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">------------------------------</div><div class="line">&gt;<span class="built_in">console</span>.log(type.isArray([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]));</div><div class="line">&gt;<span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="push-和pop"><a href="#push-和pop" class="headerlink" title="push()和pop()"></a>push()和pop()</h2><ul>
<li><code>push()</code> 向数组末尾添加任意个项并返回新数组的长度</li>
<li><code>pop()</code> 从数组末尾移除最后一项，减少数组的length值 （返回的是移除的项）</li>
</ul>
<h2 id="shift-和unshift"><a href="#shift-和unshift" class="headerlink" title="shift()和unshift()"></a>shift()和unshift()</h2><ul>
<li><p><code>unshift()</code> 向数组前端添加任意个项并返回新数组的长度</p>
</li>
<li><p><code>shift()</code> 从数组前端移除第一项，减少数组的length值 （返回的是移除的项）</p>
</li>
</ul>
<h2 id="重排序-sort-reverse"><a href="#重排序-sort-reverse" class="headerlink" title="重排序 sort() reverse()"></a>重排序 sort() reverse()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a-b;<span class="comment">//升序</span></div><div class="line">  <span class="comment">//return b-a; 或者在升序方法之后使用reverse()反转数组</span></div><div class="line">&#125;</div><div class="line">arr.sort(compare);</div></pre></td></tr></table></figure>
<h2 id="操作方法-concat-slice-splice"><a href="#操作方法-concat-slice-splice" class="headerlink" title="操作方法 concat() slice() splice()"></a>操作方法 concat() slice() splice()</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p><code>concat()</code> 方法用于连接两个或多个数组，不会改变原始数组。</p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><code>slice()</code> 方法可从已有的数组中返回选定的元素，不会改变原始数组。</p>
<blockquote>
<p>arrayObject.slice(start,end)</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>start</td>
<td>必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td>
</tr>
<tr>
<td>end</td>
<td>可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td>
</tr>
</tbody>
</table>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><code>splice()</code> 方法向/从数组中添加/删除项目，然后返回被删除的项目，会改变原始数组。</p>
<blockquote>
<p>arrayObject.splice(index,howmany,item1,…..,itemX)</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td>必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td>
</tr>
<tr>
<td>howmany</td>
<td>必需。要删除的项目数量。如果设置为 0，则不会删除项目。</td>
</tr>
<tr>
<td>item1, …, itemX</td>
<td>可选。向数组添加的新项目。</td>
</tr>
</tbody>
</table>
<h2 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h2><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><blockquote>
<p>indexOF() 从前往后查找，返回首次出现的位置（没有返回-1）</p>
</blockquote>
<h3 id="lastindexOf"><a href="#lastindexOf" class="headerlink" title="lastindexOf()"></a>lastindexOf()</h3><blockquote>
<p>lastindexOf() 从后往前查找，返回首次出现的位置（没有返回-1）</p>
</blockquote>
<h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h2><blockquote>
<p>迭代是重复反馈过程的活动，其目的通常是为了逼近所需目标或结果。每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值。</p>
</blockquote>
<ol>
<li>every(): 对数组中的每一项运行给定的函数，如果该函数对每一项都返回true，则结果返回true。</li>
<li>filter(): 对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组。</li>
<li>forEach(): 对数组中的每一项运行给定函数，这个方法没有返回值。</li>
<li>map(): 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>
<li>some(): 对数组中的每一项运行给定函数，如果该函数任意一项返回true，则返回true。</li>
</ol>
<h3 id="every-和some"><a href="#every-和some" class="headerlink" title="every()和some()"></a>every()和some()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> someResult = numbers.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(everyResult);      <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(someResult);        <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> filterResult = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(filterResult);  \\[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> mapResult = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (item * <span class="number">2</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(mapResult);     <span class="comment">//[2, 4, 6, 8, 10, 8, 6, 4, 2]</span></div></pre></td></tr></table></figure>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</div><div class="line">numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>) </span>&#123;</div><div class="line">    <span class="comment">//这里执行一些操作</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 汇总篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义range滑块]]></title>
      <url>/2017/11/17/rangeUI/</url>
      <content type="html"><![CDATA[<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p><img src="http://sandbox.runjs.cn/uploads/rs/234/bxxwrmn8/range.png" alt="range.png"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li><a href="https://htmlpreview.github.io/?https://github.com/zc95/RangeSlider/blob/master/index.html" target="_blank" rel="external">demo地址</a></li>
<li><a href="https://github.com/zc95/RangeSlider" target="_blank" rel="external">github地址</a></li>
<li><a href="https://htmlpreview.github.io/?https://github.com/zc95/RangeSlider/blob/master/simple.html" target="_blank" rel="external">简易版demo地址</a></li>
</ul>
<a id="more"></a>
<h2 id="导入CSS和JS（github地址里有）"><a href="#导入CSS和JS（github地址里有）" class="headerlink" title="导入CSS和JS（github地址里有）"></a>导入CSS和JS（github地址里有）</h2><h3 id="https-github-com-zc95-RangeSlider-blob-master-myCSS-css"><a href="#https-github-com-zc95-RangeSlider-blob-master-myCSS-css" class="headerlink" title="https://github.com/zc95/RangeSlider/blob/master/myCSS.css"></a><a href="https://github.com/zc95/RangeSlider/blob/master/myCSS.css" target="_blank" rel="external">https://github.com/zc95/RangeSlider/blob/master/myCSS.css</a></h3>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">  <span class="attribute">letter-spacing</span>: -<span class="number">1px</span>;</div><div class="line">  <span class="attribute">text-shadow</span>: -<span class="number">2px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>, <span class="number">1px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2);</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span> &#123;</div><div class="line">true<span class="attribute">-webkit-appearance</span>: none;</div><div class="line">true<span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">true<span class="attribute">border-radius</span>: <span class="number">10px</span>; <span class="comment">/*这个属性设置使填充进度条时的图形为圆角*/</span></div><div class="line">true<span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(#2EB969, #2EB969) no-repeat;<span class="comment">/*进度条的颜色*/</span></div><div class="line">true<span class="attribute">background-size</span>: <span class="number">0%</span> <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">true<span class="attribute">outline</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">true<span class="attribute">cursor</span>:pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-webkit-slider-runnable-track</span> &#123;</div><div class="line">true<span class="attribute">height</span>: <span class="number">6px</span>;</div><div class="line">true<span class="attribute">border-radius</span>: <span class="number">10px</span>; <span class="comment">/*将轨道设为圆角的*/</span></div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0.2px</span> <span class="number">0.2px</span> <span class="number">1px</span> <span class="number">0.8px</span> <span class="number">#cec8c8</span> inset; <span class="comment">/*添加底部阴影*/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=range]</span><span class="selector-pseudo">::-webkit-slider-thumb</span> &#123;</div><div class="line">true<span class="attribute">-webkit-appearance</span>: none;</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">margin-top</span>:-<span class="number">6px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">background-color</span>:white;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">3px</span> <span class="number">1px</span> <span class="number">#DEDEDE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  ​</p>
<h3 id="https-github-com-zc95-RangeSlider-blob-master-myJS-js"><a href="#https-github-com-zc95-RangeSlider-blob-master-myJS-js" class="headerlink" title="https://github.com/zc95/RangeSlider/blob/master/myJS.js"></a><a href="https://github.com/zc95/RangeSlider/blob/master/myJS.js" target="_blank" rel="external">https://github.com/zc95/RangeSlider/blob/master/myJS.js</a></h3>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">$.fn.RangeSlider = <span class="function"><span class="keyword">function</span>(<span class="params">cfg</span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> userAgent = navigator.userAgent;</div><div class="line"> <span class="keyword">var</span> isWebkit = (userAgent.indexOf(<span class="string">"AppleWebKit"</span>) &gt;= <span class="number">0</span>);</div><div class="line"> <span class="keyword">var</span> isIE = isIE();</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isIE</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> isIE = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject || <span class="string">"ActiveXObject"</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</div><div class="line">    isIE = <span class="literal">true</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    isIE = (userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span></div><div class="line">    &amp;&amp; !(userAgent.indexOf(<span class="string">"Opera"</span>) &gt; <span class="number">-1</span>));</div><div class="line">    isIE = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> isIE;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.sliderCfg = &#123;</div><div class="line">   min: cfg &amp;&amp; !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(cfg.min)) ? <span class="built_in">Number</span>(cfg.min) : <span class="literal">null</span>, </div><div class="line">   max: cfg &amp;&amp; !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(cfg.max)) ? <span class="built_in">Number</span>(cfg.max) : <span class="literal">null</span>,</div><div class="line">   step: cfg &amp;&amp; <span class="built_in">Number</span>(cfg.step) ? cfg.step : <span class="number">1</span>,</div><div class="line">   callback: cfg &amp;&amp; cfg.callback ? cfg.callback : <span class="literal">null</span></div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> $input = $(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">var</span> min = <span class="keyword">this</span>.sliderCfg.min;</div><div class="line">  <span class="keyword">var</span> max = <span class="keyword">this</span>.sliderCfg.max;</div><div class="line">  <span class="keyword">var</span> step = <span class="keyword">this</span>.sliderCfg.step;</div><div class="line">  <span class="keyword">var</span> callback = <span class="keyword">this</span>.sliderCfg.callback;</div><div class="line">  $input.attr(<span class="string">'min'</span>, min).attr(<span class="string">'max'</span>, max).attr(<span class="string">'step'</span>, step);</div><div class="line">  <span class="keyword">var</span> event = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">if</span> (isIE) &#123;</div><div class="line">   event = <span class="string">"change"</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">   event = <span class="string">"input"</span>;</div><div class="line">  &#125;	</div><div class="line">  $input.bind(event, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">   $input.attr(<span class="string">'value'</span>, <span class="keyword">this</span>.value);		</div><div class="line">   <span class="keyword">if</span> (isWebkit) &#123;</div><div class="line">    $input.css( <span class="string">'background-size'</span>, <span class="keyword">this</span>.value + <span class="string">'% 100%'</span> ); </div><div class="line">   &#125;	</div><div class="line">   <span class="keyword">if</span> ($.isFunction(callback)) &#123;</div><div class="line">    callback(<span class="keyword">this</span>);</div><div class="line">   &#125;</div><div class="line"> &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  ​</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  进度条&amp;emsp;<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"num"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span>%</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'input'</span>).RangeSlider(&#123;</div><div class="line">    step: <span class="number">0.1</span>,</div><div class="line">    callback: change</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> change = <span class="function"><span class="keyword">function</span>(<span class="params">$input</span>) </span>&#123;</div><div class="line">  <span class="comment">/*内容可自行定义*/</span></div><div class="line">  $(<span class="string">"#num"</span>).text($(<span class="string">'input'</span>).val());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[column]]></title>
      <url>/2017/11/11/column/</url>
      <content type="html"><![CDATA[<h2 id="CSS3多列"><a href="#CSS3多列" class="headerlink" title="CSS3多列"></a>CSS3多列</h2><p>CSS3 可以将文本内容设计成像报纸一样的多列布局，如下实例：</p>
<p><img src="http://sandbox.runjs.cn/uploads/rs/234/bxxwrmn8/fo2zxn7p.png" alt="示例"></p>
<h2 id="CSS3-多列属性"><a href="#CSS3-多列属性" class="headerlink" title="CSS3 多列属性"></a>CSS3 多列属性</h2><ul>
<li><code>column-count</code></li>
<li><code>column-gap</code></li>
<li><code>column-rule-style</code></li>
<li><code>column-rule-width</code></li>
<li><code>column-rule-color</code></li>
<li><code>column-rule</code></li>
<li><code>column-span</code></li>
<li><code>column-width</code></li>
</ul>
<a id="more"></a>
<h2 id="CSS3-创建多列"><a href="#CSS3-创建多列" class="headerlink" title="CSS3 创建多列"></a>CSS3 创建多列</h2><p><code>column-count</code> 属性指定了需要分割的列数</p>
<p>以下实例将 <code>&lt;div&gt;</code> 元素中的文本分为 3 列：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.newspaper</span></div><div class="line">&#123;</div><div class="line">true<span class="attribute">-moz-column-count</span>:<span class="number">3</span>; <span class="comment">/* Firefox */</span></div><div class="line">true<span class="attribute">-webkit-column-count</span>:<span class="number">3</span>; <span class="comment">/* Safari and Chrome */</span></div><div class="line">true<span class="attribute">column-count</span>:<span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"newspaper"</span>&gt;</span>....................<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-count" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="CSS3-多列中列与列间的间隙"><a href="#CSS3-多列中列与列间的间隙" class="headerlink" title="CSS3 多列中列与列间的间隙"></a>CSS3 多列中列与列间的间隙</h2><p><code>column-gap</code> 属性指定了列与列间的间隙</p>
<p>以下实例指定了列与列间的间隙为 40 像素：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.newspaper</span></div><div class="line">&#123;</div><div class="line">true<span class="attribute">-moz-column-count</span>:<span class="number">3</span>; <span class="comment">/* Firefox */</span></div><div class="line">true<span class="attribute">-webkit-column-count</span>:<span class="number">3</span>; <span class="comment">/* Safari and Chrome */</span></div><div class="line">true<span class="attribute">column-count</span>:<span class="number">3</span>;</div><div class="line"></div><div class="line">true<span class="attribute">-moz-column-gap</span>:<span class="number">40px</span>; <span class="comment">/* Firefox */</span></div><div class="line">true<span class="attribute">-webkit-column-gap</span>:<span class="number">40px</span>; <span class="comment">/* Safari and Chrome */</span></div><div class="line">true<span class="attribute">column-gap</span>:<span class="number">40px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"newspaper"</span>&gt;</span>....................<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-gap" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="CSS3-列边框"><a href="#CSS3-列边框" class="headerlink" title="CSS3 列边框"></a>CSS3 列边框</h2><p><code>column-rule-style</code> 属性指定了列与列间的边框样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.newspaper</span></div><div class="line">&#123;</div><div class="line">true<span class="attribute">-webkit-column-rule-style</span>: solid; <span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">    <span class="attribute">-moz-column-rule-style</span>: solid; <span class="comment">/* Firefox */</span></div><div class="line">    <span class="attribute">column-rule-style</span>: solid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-rule-style" target="_blank" rel="external">尝试一下 »</a></p>
<p><code>column-rule-width</code> 属性指定了两列的边框厚度：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">-webkit-column-rule-width</span>: <span class="number">1px</span>; <span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">    <span class="attribute">-moz-column-rule-width</span>: <span class="number">1px</span>; <span class="comment">/* Firefox */</span></div><div class="line">    <span class="attribute">column-rule-width</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-rule-width" target="_blank" rel="external">尝试一下 »</a></p>
<p><code>column-rule-color</code> 属性指定了两列的边框颜色：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">-webkit-column-rule-color</span>: lightblue; <span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">    <span class="attribute">-moz-column-rule-color</span>: lightblue; <span class="comment">/* Firefox */</span></div><div class="line">    <span class="attribute">column-rule-color</span>: lightblue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-rule-color" target="_blank" rel="external">尝试一下 »</a></p>
<p><code>column-rule</code> 属性是 column-rule-* 所有属性的简写。</p>
<p>以下实例设置了列直接的边框的厚度，样式及颜色：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">-webkit-column-rule</span>: <span class="number">1px</span> solid lightblue; <span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">    <span class="attribute">-moz-column-rule</span>: <span class="number">1px</span> solid lightblue; <span class="comment">/* Firefox */</span></div><div class="line">    <span class="attribute">column-rule</span>: <span class="number">1px</span> solid lightblue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-rule" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="指定元素跨越多少列"><a href="#指定元素跨越多少列" class="headerlink" title="指定元素跨越多少列"></a>指定元素跨越多少列</h2><p>以下实例指定 <code>&lt;h2&gt;</code> 元素跨越所有列：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h2</span> &#123;</div><div class="line">    <span class="attribute">-webkit-column-span</span>: all; <span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">    <span class="attribute">column-span</span>: all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-span" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="指定列的宽度"><a href="#指定列的宽度" class="headerlink" title="指定列的宽度"></a>指定列的宽度</h2><p><code>column-width</code> 属性指定了列的宽度。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">-webkit-column-width</span>: <span class="number">100px</span>; <span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">    <span class="attribute">column-width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/try/try.php?filename=trycss3_column-width" target="_blank" rel="external">尝试一下 »</a></p>
<h2 id="CSS3-多列属性-1"><a href="#CSS3-多列属性-1" class="headerlink" title="CSS3 多列属性"></a>CSS3 多列属性</h2><p>下表列出了所有 CSS3 的多列属性：</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-count.html" target="_blank" rel="external">column-count</a></td>
<td>指定元素应该被分割的列数。</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-fill.html" target="_blank" rel="external">column-fill</a></td>
<td>指定如何填充列</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-gap.html" target="_blank" rel="external">column-gap</a></td>
<td>指定列与列之间的间隙</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-rule.html" target="_blank" rel="external">column-rule</a></td>
<td>所有 column-rule-* 属性的简写</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-rule-color.html" target="_blank" rel="external">column-rule-color</a></td>
<td>指定两列间边框的颜色</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-rule-style.html" target="_blank" rel="external">column-rule-style</a></td>
<td>指定两列间边框的样式</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-rule-width.html" target="_blank" rel="external">column-rule-width</a></td>
<td>指定两列间边框的厚度</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-span.html" target="_blank" rel="external">column-span</a></td>
<td>指定元素要跨越多少列</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-column-width.html" target="_blank" rel="external">column-width</a></td>
<td>指定列的宽度</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.runoob.com/cssref/css3-pr-columns.html" target="_blank" rel="external">columns</a></td>
<td>设置 column-width 和 column-count 的简写</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
            <tag> 布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[类似Windows文件的布局问题]]></title>
      <url>/2017/11/03/AdaptiveLayout/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何做到类似windows文件的布局：无论如何改变窗口（屏幕）的大小，文件或者文件夹的大小都是固定的，不同的是一行显示的数目会有所变化；</p>
<h2 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h2><p>首先这类布局，肯定会先想到百分比的方法（最快的方法），在不同手机上看的话当然没区别，比如一行显示4个的话，那么一个就是25%，但如果放到ipad或者电脑上来看的话，就大的有些恐怖了</p>
<h2 id="百分比加-media布局"><a href="#百分比加-media布局" class="headerlink" title="百分比加@media布局"></a>百分比加@media布局</h2><p>同上，我们可以用@media的方法来解决不同类型设备的差异问题，也就是多写几行css的问题<br><a id="more"></a></p>
<h2 id="我的方法"><a href="#我的方法" class="headerlink" title="我的方法"></a>我的方法</h2><p><code>var eachWidth = $(document).width() / Math.floor($(document).width() / 80);</code></p>
<p>假如我想每个div都在80px左右，那么一行就可以放 <code>$(document).width() / 80</code> 个，用 <code>Math.floor</code> 向下取整之后可以去掉不满一个的零头，再用屏幕宽度除以这个取整后的个数，就能得到长度在80±10的eachWidth值了</p>
<p>下面是在控制台的不同手机屏幕大小下console出来的数据：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).width() / <span class="built_in">Math</span>.floor($(<span class="built_in">document</span>).width() / <span class="number">80</span>) <span class="comment">//iPad</span></div><div class="line">--&gt; <span class="number">85.33333333333333</span></div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).width() / <span class="built_in">Math</span>.floor($(<span class="built_in">document</span>).width() / <span class="number">80</span>) <span class="comment">//iPhone 6 Plus</span></div><div class="line">--&gt; <span class="number">82.8</span></div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).width() / <span class="built_in">Math</span>.floor($(<span class="built_in">document</span>).width() / <span class="number">80</span>) <span class="comment">//iPhone 6</span></div><div class="line">--&gt; <span class="number">93.75</span></div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).width() / <span class="built_in">Math</span>.floor($(<span class="built_in">document</span>).width() / <span class="number">80</span>) <span class="comment">//iPhone 5</span></div><div class="line">--&gt; <span class="number">80</span></div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).width() / <span class="built_in">Math</span>.floor($(<span class="built_in">document</span>).width() / <span class="number">80</span>) <span class="comment">//Nexus 6P</span></div><div class="line">--&gt; <span class="number">82.4</span></div></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><ul>
<li><p>移动端</p>
<p><img src="http://sandbox.runjs.cn/uploads/rs/234/bxxwrmn8/buju1.png" alt="iPhone"></p>
</li>
</ul>
<ul>
<li><p>iPad</p>
<p><img src="http://sandbox.runjs.cn/uploads/rs/234/bxxwrmn8/buju2.png" alt="iPad"></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 页面布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原生javascript和jquery的用法对比]]></title>
      <url>/2017/10/25/jsAndJq/</url>
      <content type="html"><![CDATA[<h2 id="选取元素"><a href="#选取元素" class="headerlink" title="选取元素"></a>选取元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line"><span class="keyword">var</span> els = $(<span class="string">'.el'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="keyword">var</span> els = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.el'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Shorthand</span></div><div class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelectorAll(el);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>querySelectorAll方法返回的是NodeList对象，需要转换为数组。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myList = Array<span class="selector-class">.prototype</span><span class="selector-class">.slice</span><span class="selector-class">.call</span>(myNodeList)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">El</span> = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">El</span> = document.createElement(<span class="string">'div'</span>);</div></pre></td></tr></table></figure>
<h2 id="添加事件"><a href="#添加事件" class="headerlink" title="添加事件"></a>添加事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.el'</span>).on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">[].forEach.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.el'</span>), <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">  el.addEventListener(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="get-set属性"><a href="#get-set属性" class="headerlink" title="get/set属性"></a>get/set属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.el'</span>).filter(<span class="string">':first'</span>).attr(<span class="string">'key'</span>, <span class="string">'value'</span>);</div><div class="line">$(<span class="string">'.el'</span>).filter(<span class="string">':first'</span>).attr(<span class="string">'key'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).setAttribute(<span class="string">'key'</span>, <span class="string">'value'</span>);</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).getAttribute(<span class="string">'key'</span>);</div></pre></td></tr></table></figure>
<h2 id="添加和移除样式Class"><a href="#添加和移除样式Class" class="headerlink" title="添加和移除样式Class"></a>添加和移除样式Class</h2><p>DOM元素本身有一个可读写的className属性，可以用来操作class。</p>
<p>HTML 5还提供一个classList对象，功能更强大（IE 9不支持）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.el'</span>).addClass(<span class="string">'class'</span>);</div><div class="line">$(<span class="string">'.el'</span>).removeClass(<span class="string">'class'</span>);</div><div class="line">$(<span class="string">'.el'</span>).toggleClass(<span class="string">'class'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).classList.add(<span class="string">'class'</span>);</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).classList.remove(<span class="string">'class'</span>);</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).classList.toggle(<span class="string">'class'</span>);</div></pre></td></tr></table></figure>
<h2 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h2><p>尾部追加元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.el'</span>).append($(<span class="string">'&lt;div/&gt;'</span>));</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).appendChild(<span class="built_in">document</span>.createElement(<span class="string">'div'</span>));</div></pre></td></tr></table></figure>
<p>头部追加元素：</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery</span></div><div class="line">$(‘.el’).prepend(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>)</div><div class="line"></div><div class="line"><span class="comment">//Native</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">parent</span> = <span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>);</div><div class="line"><span class="built_in">parent</span>.insertBefore(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>,<span class="built_in">parent</span>.childNodes[<span class="number">0</span>])</div></pre></td></tr></table></figure>
<h2 id="克隆元素"><a href="#克隆元素" class="headerlink" title="克隆元素"></a>克隆元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line"><span class="keyword">var</span> clonedEl = $(<span class="string">'.el'</span>).clone();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="keyword">var</span> clonedEl = <span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).cloneNode(<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Remove</div><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.el'</span>).remove();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">remove(<span class="string">'.el'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> toRemove = <span class="built_in">document</span>.querySelector(el);</div><div class="line"></div><div class="line">  toRemove.parentNode.removeChild(toRemove);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取父级元素"><a href="#获取父级元素" class="headerlink" title="获取父级元素"></a>获取父级元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.el'</span>).parent();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).parentNode;</div></pre></td></tr></table></figure>
<h2 id="获取上一个-下一个元素（Prev-next-element）"><a href="#获取上一个-下一个元素（Prev-next-element）" class="headerlink" title="获取上一个/下一个元素（Prev/next element）"></a>获取上一个/下一个元素（Prev/next element）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.el'</span>).prev();</div><div class="line">$(<span class="string">'.el'</span>).next();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).previousElementSibling;</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.el'</span>).nextElementSibling;</div></pre></td></tr></table></figure>
<h2 id="XHR-and-AJAX"><a href="#XHR-and-AJAX" class="headerlink" title="XHR and AJAX"></a>XHR and AJAX</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$.get(<span class="string">'url'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">$.post(<span class="string">'url'</span>, &#123;<span class="attr">data</span>: data&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"></div><div class="line"><span class="comment">// get</span></div><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">xhr.open(<span class="string">'GET'</span>, url);</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">xhr.send();</div><div class="line"></div><div class="line"><span class="comment">// post</span></div><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line"></div><div class="line">xhr.open(<span class="string">'POST'</span>, url);</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">xhr.send(&#123;<span class="attr">data</span>: data&#125;);</div></pre></td></tr></table></figure>
<h2 id="清空子元素"><a href="#清空子元素" class="headerlink" title="清空子元素"></a>清空子元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery</span></div><div class="line">$(<span class="string">"#elementID"</span>).empty()</div><div class="line"></div><div class="line"><span class="comment">//Native</span></div><div class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"elementID"</span>)</div><div class="line"><span class="keyword">while</span>(element.firstChild) element.removeChild(element.firstChild);</div></pre></td></tr></table></figure>
<h2 id="检查是否有子元素"><a href="#检查是否有子元素" class="headerlink" title="检查是否有子元素"></a>检查是否有子元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery</span></div><div class="line"><span class="keyword">if</span> (!$(<span class="string">"#elementID"</span>).is(<span class="string">":empty"</span>))&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//Native</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"elementID"</span>).hasChildNodes())&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="document-ready"><a href="#document-ready" class="headerlink" title="$(document).ready"></a>$(document).ready</h2><p>DOM加载完成，会触发DOMContentLoaded事件，等同于jQuery的$(document).ready方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="数据储存"><a href="#数据储存" class="headerlink" title="数据储存"></a>数据储存</h2><p>jQuery对象可以储存数据。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"body"</span>)<span class="meta">.data</span>(<span class="string">"foo"</span>, <span class="number">52</span>)<span class="comment">;</span></div><div class="line">$(<span class="string">"body"</span>)<span class="meta">.data</span>(<span class="string">"foo"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>HTML 5有一个dataset对象，也有类似的功能（IE 10不支持），不过只能保存字符串。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">element.dataset.<span class="keyword">user</span> <span class="title">= JSON</span>.stringify(user);</div><div class="line">element.dataset.score = score;</div></pre></td></tr></table></figure>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>jQuery的animate方法，用于生成动画效果。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">foo.animate(<span class="string">'slow'</span>, &#123; x: <span class="string">'+=10px'</span> &#125;)</span></div></pre></td></tr></table></figure>
<p>jQuery的动画效果，很大部分基于DOM。但是目前，CSS 3的动画远比DOM强大，所以可以把动画效果写进CSS，然后通过操作DOM元素的class，来展示动画。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo<span class="selector-class">.classList</span><span class="selector-class">.add</span>(<span class="string">'animate'</span>)</div></pre></td></tr></table></figure>
<p>如果需要对动画使用回调函数，CSS 3也定义了相应的事件。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">el</span><span class="selector-class">.addEventListener</span>(<span class="string">"webkitTransitionEnd"</span>, transitionEnded);</div><div class="line"><span class="selector-tag">el</span><span class="selector-class">.addEventListener</span>(<span class="string">"transitionend"</span>, transitionEnded);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 汇总篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css换行问题]]></title>
      <url>/2017/10/25/wordBreak/</url>
      <content type="html"><![CDATA[<p>css实现强制不换行/自动换行/强制换行</p>
<h2 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h2><p><strong>按单词自动换行</strong></p>
<blockquote>
<p>p { word-wrap:break-word; }</p>
</blockquote>
<p><strong>强制按英文字母断行</strong> <code>需要将行内元素设置为块级元素</code> </p>
<blockquote>
<p>p { word-break:break-all; }</p>
</blockquote>
<a id="more"></a>
<h2 id="强制不换行"><a href="#强制不换行" class="headerlink" title="强制不换行"></a>强制不换行</h2><p><strong>强制不换行</strong></p>
<blockquote>
<p>p { white-space:nowrap; }</p>
</blockquote>
<p><strong>超出显示省略号</strong></p>
<blockquote>
<p>p { white-space:nowrap; text-overflow:ellipsis; overflow:hidden; }</p>
<p>一定要给文字的父容器</p>
<p>如果父容器是行级，一定要转成块级（一定要是 block，设置为 inline-block 无效）</p>
</blockquote>
<p><strong>white-space: <code>normal</code> <code>pre</code> <code>nowrap</code> <code>pre-wrap</code> <code>pre-line</code> <code>inherit</code> ;</strong> </p>
<blockquote>
<p>white-space 属性设置如何处理元素内的空白 </p>
</blockquote>
<ul>
<li>normal 默认。多个空白或者多个换行将被当一个空白或一个换行处理- pre 空白和换行会被浏览器保留。其行为方式类似 HTML 中的 pre 标签- nowrap 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止- pre-wrap 保留空白符序列，但是正常地进行换行 - pre-line 合并空白符序列，但是保留换行符- inherit 规定应该从父元素继承 white-space 属性的值<br><strong>word-break: <code>normal</code> <code>break-all</code> <code>keep-all</code> ;</strong> <blockquote>
<p>word-break 属性用来标明怎么样进行单词内的断句</p>
</blockquote>
</li>
<li>normal：使用浏览器默认的换行规则- break-all:允许再单词内换行 - keep-all:只能在半角空格或连字符处换行</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表头固定]]></title>
      <url>/2017/10/24/amazingTable/</url>
      <content type="html"><![CDATA[<p>table的表头固定 ——— 上下滚动表头固定，左右滚动表头跟随滚动</p>
<h2 id="关于表格固定"><a href="#关于表格固定" class="headerlink" title="关于表格固定"></a>关于表格固定</h2><p>如果数据不是很多，一般都是用两个表格，一个放thead，另一个放tbody，这个没难度就不再赘述了</p>
<p>如果数据很多就要考虑左右滚动的情况了<br><a id="more"></a></p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>demo: <a href="http://jsrun.net/biiKp/show" target="_blank" rel="external">http://jsrun.net/biiKp/show</a></p>
<p>同样是两个table，一个放thead，另一个放tbody，用两个div分别包裹起来</p>
<p>这两个div依赖于他们的的父容器进行absolute定位</p>
<blockquote>
<p>theadDiv {</p>
<p> position: absolute;<br> left: 0;<br> right: 0;<br> overflow: hidden; //这里hidden是用于隐藏滚动条<br>}</p>
<p>tbodyDiv {</p>
<p> position: absolute;<br> top: 35px;<br> left: 0;<br> right: 0;<br> bottom: 0;<br> overflow: auto;<br>}</p>
</blockquote>
<p>给放置thead的div添加样式 <code>overflow: hidden;</code> ，表头不需要看到滚动条</p>
<p>给放置tbody的div添加样式 <code>overflow: auto;</code> ，表的主体需要滚动条</p>
<p>这时只需要在滚动下面的tbody时，同样滚动上面的thead就行</p>
<blockquote>
<p>$(‘#tbodyDiv’).on(‘scroll’, function () {</p>
<p>  $(“#theadDiv”).scrollLeft($(‘#tbodyDiv’).scrollLeft());</p>
<p>  });</p>
<p>})</p>
</blockquote>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>demo: <a href="http://jsrun.net/2iiKp/show" target="_blank" rel="external">http://jsrun.net/2iiKp/show</a></p>
<ol>
<li>大概思路就是  <code>容器A</code> 下面有 <code>容器1（放置thead）</code> 和 <code>容器2（放置tbody）</code></li>
<li>x轴滚动条属于 <code>容器A</code> ，滚动 <code>容器1（放置thead）</code> 和 <code>容器2（放置tbody）</code></li>
<li>y轴属于 <code>容器2</code> ，滚动 <code>tbody</code></li>
</ol>
<p>这个方法有缺陷，就是y轴的滚动条必须要当x轴滚到最右边才看得到，当然Mac下无差（Mac下的滚动条不滚动的时候是隐藏的，而win系统下就会影响美观，但都不影响操作，毕竟我们有鼠标滚轮）</p>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM]]></title>
      <url>/2017/10/21/DOM/</url>
      <content type="html"><![CDATA[<p>为什么我们要尽量少的去操作DOM结构？</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发的过程中，javascript极为重要的一个功能就是对DOM对象的操作，无论增删改查在前端页面操作这一范围内都是比较消耗性能的。如何高效率的，便捷的操作DOM，这就是本文要讲述的，希望看完全文，你能知道如何更高效的通过原生js以及jQuery操作DOM元素。</p>
<h2 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h2><ol>
<li>DOM修改导致的页面重绘<code>repaint</code>、重构<code>reflow</code>，重新排版是用户阻塞的操作，同时，如果频繁重排，CPU使用率也会猛涨</li>
<li>repaint意味着样式的改变比如div调整了背景色等，但是位置不变，只改变我们操作的元素</li>
<li>reflow意味着结构的改变，比如一堆元素堆叠，改变其中一个的宽高，那么相应的所有元素的位置都要改变</li>
<li>所以通常来看repaint的代价要远小于reflow，速度也更快<a id="more"></a>
<h2 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h2></li>
</ol>
<h3 id="能放到DOM操作之外的操作就放到外面，DOM操作要尽量少"><a href="#能放到DOM操作之外的操作就放到外面，DOM操作要尽量少" class="headerlink" title="能放到DOM操作之外的操作就放到外面，DOM操作要尽量少"></a>能放到DOM操作之外的操作就放到外面，DOM操作要尽量少</h3><p>这是一个不好的事例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $obj = $(<span class="string">"#obj"</span>);</div><div class="line"><span class="keyword">var</span> data = [&#123;<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"a"</span>&#125;,&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"b"</span>&#125;];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">    $obj.append(<span class="string">'&lt;option value="'</span>+data[i].id+<span class="string">'"&gt;'</span>+data[i].name+<span class="string">'&lt;/option&gt;'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>更好的做法，使用容器存放临时变更，最后再一次性更新DOM：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $obj = $(<span class="string">"#obj"</span>);</div><div class="line"><span class="keyword">var</span> data = [&#123;<span class="string">"id"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"a"</span>&#125;,&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"b"</span>&#125;];</div><div class="line"><span class="keyword">var</span> tempStr = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">    tempStr +=(<span class="string">'&lt;option value="'</span>+data[i].id+<span class="string">'"&gt;'</span>+data[i].name+<span class="string">'&lt;/option&gt;'</span>);</div><div class="line">&#125;;</div><div class="line">$obj.html(tempStr);</div></pre></td></tr></table></figure>
<h3 id="大范围操作先把容器隐藏，在其中操作完成后再显示"><a href="#大范围操作先把容器隐藏，在其中操作完成后再显示" class="headerlink" title="大范围操作先把容器隐藏，在其中操作完成后再显示"></a>大范围操作先把容器隐藏，在其中操作完成后再显示</h3><p>这个也算是优化的一种，这原理涉及到浏览器加载和渲染的原理,简单说就是隐藏的元素其中不会产生reflow</p>
<h3 id="样式操作不要注意修改属性，直接替换class"><a href="#样式操作不要注意修改属性，直接替换class" class="headerlink" title="样式操作不要注意修改属性，直接替换class"></a>样式操作不要注意修改属性，直接替换class</h3><p>这个还是比较容易理解的，你逐一修改要访问很多次，而替换class就相当于批量操作了，访问一次DOM就可以了,当然性能提高了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于性能方面，平时应注意积累。</p>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
            <tag> DOM操作 </tag>
            
            <tag> 循环 </tag>
            
            <tag> 渲染 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文本框模糊查询]]></title>
      <url>/2017/10/21/input/</url>
      <content type="html"><![CDATA[<p>文本框模糊匹配(纯html+css+jquery简单实现) ，自己写的一个小组件。</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li><a href="https://htmlpreview.github.io/?https://github.com/zc95/Fuzzy-Query/blob/master/index.html" target="_blank" rel="external">demo地址</a></li>
<li><a href="https://github.com/zc95/Fuzzy-Query" target="_blank" rel="external">github地址</a></li>
</ul>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol>
<li>引入<code>css</code>、<code>jQuery</code> 和 <code>js</code>（github里面有）</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#id'</span>).FuzzyQuery(&#123;</div><div class="line">        <span class="string">'msg'</span>: msg</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p><code>msg</code> 是json数据（必须），<code>fontSize</code> 是模糊查询项的字体大小，<code>height</code> 是模糊查询项的高度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#Name'</span>).FuzzyQuery(&#123;</div><div class="line">        <span class="string">'msg'</span>: msg,</div><div class="line">        <span class="string">'fontSize'</span>: <span class="string">'13px'</span>,</div><div class="line">        <span class="string">'height'</span>: <span class="string">'30px'</span></div><div class="line">      &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="msg格式示例"><a href="#msg格式示例" class="headerlink" title="msg格式示例"></a>msg格式示例</h2><p><code>name</code> 是文本，<code>id</code> 是标识<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg = [&#123; <span class="string">"name"</span>: <span class="string">"苏州大学"</span>, <span class="string">"id"</span>: <span class="string">"szdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"北京大学"</span>, <span class="string">"id"</span>: <span class="string">"bjdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"南京大学"</span>, <span class="string">"id"</span>: <span class="string">"njdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"清华大学"</span>, <span class="string">"id"</span>: <span class="string">"qhdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"复旦大学"</span>, <span class="string">"id"</span>: <span class="string">"fddx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"浙江大学"</span>, <span class="string">"id"</span>: <span class="string">"zjdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"上海交通大学"</span>, <span class="string">"id"</span>: <span class="string">"shjtdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"武汉大学"</span>, <span class="string">"id"</span>: <span class="string">"whdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"中国人民大学"</span>, <span class="string">"id"</span>: <span class="string">"zgrmdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"中国科学技术大学"</span>, <span class="string">"id"</span>: <span class="string">"zgkxjsdx"</span> &#125;, &#123; <span class="string">"name"</span>: <span class="string">"北京师范大学"</span>, <span class="string">"id"</span>: <span class="string">"bjsfdx"</span> &#125;];</div></pre></td></tr></table></figure></p>
<h2 id="html和CSS部分的一些细节"><a href="#html和CSS部分的一些细节" class="headerlink" title="html和CSS部分的一些细节"></a>html和CSS部分的一些细节</h2><ol>
<li><blockquote>
<p>outline: none;  </p>
<p>outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，为了美观应该去掉</p>
</blockquote>
</li>
<li><blockquote>
<p>box-sizing:border-box;</p>
<p>这可令浏览器呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。</p>
</blockquote>
</li>
<li><blockquote>
<p>autocomplete=”off”</p>
<p>autocomplete是form表单的属性，默认为on，其含义代表是否让浏览器自动记录之前输入的值，应该关闭记录</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Mac下通过Hexo在Github上搭建博客（入门篇）]]></title>
      <url>/2017/10/20/hexoBlog/</url>
      <content type="html"><![CDATA[<p>Hexo 快速，简洁且高效的博客框架，让上百个页面在几秒内瞬间完成渲染。Hexo支持Github Flavored Markdown的所有功能，甚至可以整合Octopress的大多数插件，并自己也拥有强大的插件系统。</p>
<p><code>Hexo</code> <code>github</code> <code>Node.js</code> <code>Git</code> <code>markdown</code> <code>themes</code> <code>bash命令</code> <code>npm</code> <code>SSH</code></p>
<h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是<a href="https://hexo.io/docs/index.html" target="_blank" rel="external">Hexo</a>？</h2><ul>
<li>Hexo 是一个快速、简洁且高效的博客框架。</li>
<li>Hexo 使用 <a href="https://baike.baidu.com/item/markdown" target="_blank" rel="external">Markdown</a>（或其他渲染引擎，之后会解释什么是Markdown）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>
</ul>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p><strong>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</strong></p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> （安装Recommended For Most Users那个版本）</li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Git</a><a id="more"></a>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2></li>
</ul>
<p><strong>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</strong><br>命令就是你的Launchpad里叫 <code>终端</code> 的app，相当于win的cmd<br>以下出现的$都不是命令的一部分</p>
<blockquote>
<p>$ npm install -g hexo-cli<br>全局安装 hexo 模块，</p>
<p>如果下面的操作报错则需要卸载 hexo：<br>$ npm uninstall hexo</p>
<p>再重新安装 hexo：<br>$ sudo npm install -g hexo<br>输入管理员密码（Mac登录密码）即开始安装</p>
</blockquote>
<h2 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h2><p><strong>初始化, 在指定目录中创建文件目录，以 blog 为例：</strong></p>
<blockquote>
<p>$ hexo init blog</p>
</blockquote>
<p><strong>blog是你建立的文件夹名称，cd到blog文件夹下，安装npm：</strong></p>
<blockquote>
<p>$ cd blog</p>
<p>$ npm install</p>
</blockquote>
<h2 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h2><p><strong>以创建博客 firstBlog为例，标题中包含空格需要用引号将标题引起来</strong></p>
<blockquote>
<p>$ hexo new firstBlog<br>执行该命令后在<code>source/_posts</code>目录下生成文件</p>
</blockquote>
<h2 id="生成博客页面"><a href="#生成博客页面" class="headerlink" title="生成博客页面"></a>生成博客页面</h2><blockquote>
<p>$ hexo generate<br>执行该命令后会生成<code>public</code>目录</p>
<p>$ hexo sever<br>执行命令后启动服务，访问<code>http://localhost:4000/</code>可查看博客</p>
</blockquote>
<p><strong>注意</strong>：</p>
<ul>
<li>之后每次修改完你的博客或者配置内容，都需要用$ hexo sever来开启hexo服务器预览</li>
<li>按 Ctrl+C 停止服务器，以便于进行其他操作</li>
</ul>
<h2 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h2><p>在进行这一步时你需要一个github账号，到 <a href="https://github.com/" target="_blank" rel="external">github官网</a> 用邮箱注册就行，名字尽量简短有意义，我的github地址：<a href="https://github.com/zc95" target="_blank" rel="external">https://github.com/zc95</a></p>
<p>创建仓库登录你的Github帐号，新建仓库，一定要是名为 <code>用户名.github.io</code> 的固定写法（如 <code>zc95.github.io</code> ），我的仓库地址：<a href="https://github.com/zc95/zc95.github.io" target="_blank" rel="external">https://github.com/zc95/zc95.github.io</a></p>
<h2 id="上传到-github"><a href="#上传到-github" class="headerlink" title="上传到 github"></a>上传到 github</h2><p><strong>首次使用配置：</strong></p>
<blockquote>
<p>$ npm install hexo-deplorer-git –save<br>安装 <code>hexo-deplorer-git</code></p>
</blockquote>
<p>打开新建的blog文件夹，找到 <code>_config.yml</code> 配置文件，用记事本打开，Ctrl+F来搜索deploy，type改为git，repository改为你自己的仓库地址，在配置博客站点的_config.yml文件时（包括theme主题站点中的_config.yml），在所有的冒号: 后边都要加一个空格，否则执行hexo命令会报错，切记 切记</p>
<blockquote>
<p>deploy:<br>type: git<br>repository: <code>你的仓库地址</code><br>branch: master</p>
</blockquote>
<p>ok，可以尽情装逼了。。。</p>
<blockquote>
<p>hexo g == hexo generate #生成页面文件</p>
<p>hexo s == hexo server #启动服务预览</p>
<p>hexo d == hexo deploy # 部署到GitHub</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>git clone #克隆主题时用到</p>
<p>cd blog #进入blog文件夹</p>
<p>hexo n “我的博客” == hexo new “我的博客” #新建文章</p>
<p>hexo clean  #清除缓存 网页正常情况下可以忽略此条命令  </p>
<p>hexo g == hexo generate #生成</p>
<p>hexo s == hexo server #启动服务预览</p>
<p>hexo d == hexo deploy # 部署</p>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d #你应该看得懂…</p>
</blockquote>
<h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> author = &#123; </div><div class="line">  Name  : <span class="string">"张成"</span>,</div><div class="line">  Blog : <span class="string">"http://zc95.github.io"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> Node.js </tag>
            
            <tag> markdown </tag>
            
            <tag> npm </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>

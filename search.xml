<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[DOM]]></title>
      <url>/2017/10/21/DOM/</url>
      <content type="html"><![CDATA[<p>为什么我们要尽量少的去操作DOM结构？</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发的过程中，javascript极为重要的一个功能就是对DOM对象的操作，无论增删改查在前端页面操作这一范围内都是比较消耗性能的。如何高效率的，便捷的操作DOM，这就是本文要讲述的，希望看完全文，你能知道如何更高效的通过原生js以及jQuery操作DOM元素。</p>
<h2 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h2><ol>
<li>DOM修改导致的页面重绘<code>repaint</code>、重构<code>reflow</code>，重新排版是用户阻塞的操作，同时，如果频繁重排，CPU使用率也会猛涨</li>
<li>repaint意味着样式的改变比如div调整了背景色等，但是位置不变，只改变我们操作的元素</li>
<li>reflow意味着结构的改变，比如一堆元素堆叠，改变其中一个的宽高，那么相应的所有元素的位置都要改变</li>
<li>所以通常来看repaint的代价要远小于reflow，速度也更快</li>
</ol>
<h2 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h2><h3 id="能放到DOM操作之外的操作就放到外面，DOM操作要尽量少"><a href="#能放到DOM操作之外的操作就放到外面，DOM操作要尽量少" class="headerlink" title="能放到DOM操作之外的操作就放到外面，DOM操作要尽量少"></a>能放到DOM操作之外的操作就放到外面，DOM操作要尽量少</h3><p>这是一个不好的事例：</p>
<pre><code class="javascript">var $obj = $(&quot;#obj&quot;);
var data = [{&quot;id&quot;:0,&quot;name&quot;:&quot;a&quot;},{&quot;id&quot;:1,&quot;name&quot;:&quot;b&quot;}];
for (var i = 0; i &lt; data.length; i++) {
    $obj.append(&#39;&lt;option value=&quot;&#39;+data[i].id+&#39;&quot;&gt;&#39;+data[i].name+&#39;&lt;/option&gt;&#39;);
};
</code></pre>
<p>更好的做法，使用容器存放临时变更，最后再一次性更新DOM：</p>
<pre><code class="javascript">var $obj = $(&quot;#obj&quot;);
var data = [{&quot;id&quot;:0,&quot;name&quot;:&quot;a&quot;},{&quot;id&quot;:1,&quot;name&quot;:&quot;b&quot;}];
var tempStr = &quot;&quot;;
for (var i = 0; i &lt; data.length; i++) {
    tempStr +=(&#39;&lt;option value=&quot;&#39;+data[i].id+&#39;&quot;&gt;&#39;+data[i].name+&#39;&lt;/option&gt;&#39;);
};
$obj.html(tempStr);
</code></pre>
<h3 id="大范围操作先把容器隐藏，在其中操作完成后再显示"><a href="#大范围操作先把容器隐藏，在其中操作完成后再显示" class="headerlink" title="大范围操作先把容器隐藏，在其中操作完成后再显示"></a>大范围操作先把容器隐藏，在其中操作完成后再显示</h3><p>这个也算是优化的一种，这原理涉及到浏览器加载和渲染的原理,简单说就是隐藏的元素其中不会产生reflow</p>
<h3 id="样式操作不要注意修改属性，直接替换class"><a href="#样式操作不要注意修改属性，直接替换class" class="headerlink" title="样式操作不要注意修改属性，直接替换class"></a>样式操作不要注意修改属性，直接替换class</h3><p>这个还是比较容易理解的，你逐一修改要访问很多次，而替换class就相当于批量操作了，访问一次DOM就可以了,当然性能提高了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于性能方面，平时应注意积累。</p>
]]></content>
      
        <categories>
            
            <category> 心得篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
            <tag> DOM操作 </tag>
            
            <tag> 循环 </tag>
            
            <tag> 渲染 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[input模糊查询]]></title>
      <url>/2017/10/21/input/</url>
      <content type="html"><![CDATA[<p>文本框模糊匹配(纯html+jquery简单实现) ，自己写的一个小组件。</p>
<h2 id="Demo链接"><a href="#Demo链接" class="headerlink" title="Demo链接"></a>Demo链接</h2><ul>
<li><a href="http://jsrun.net/NXiKp/show" target="_blank" rel="external">Demo</a></li>
<li><a href="http://jsrun.net/NXiKp/edit" target="_blank" rel="external">源码</a></li>
</ul>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol>
<li>引入<code>css</code>和<code>js</code>: <a href="http://jsrun.net/EXiKp.css" target="_blank" rel="external">http://jsrun.net/EXiKp.css</a> 和  <a href="http://jsrun.net/sXiKp.js" target="_blank" rel="external">http://jsrun.net/sXiKp.js</a> （点开链接拷到你的项目中）</li>
<li>给需要加模糊查询的input加上<code>class=&quot;filter_input&quot;</code>，id必需</li>
<li>getFilters(id, msg);（前面一个参数是input的id，后面一个参数是后台返的json字符串）</li>
</ol>
<h2 id="JS主要代码"><a href="#JS主要代码" class="headerlink" title="JS主要代码"></a>JS主要代码</h2><p><strong>创建需要的div包裹住文本框</strong></p>
<pre><code class="javascript">function wraps(){
  for(var i = 0 ; i&lt;$(&#39;.filter_input&#39;).length ; i++){
    var id = $(&#39;.filter_input&#39;).eq(i).attr(&#39;id&#39;);
    var $width = $(&#39;.filter_input&#39;).eq(i).css(&quot;width&quot;);
    $(&#39;#&#39; + id).wrap(&quot;&lt;div class=&#39;filter_wrap&#39; id=&#39;filter_wrap&quot;+id+&quot;&#39;&gt;&lt;/div&gt;&quot;);
  $(&#39;#&#39; + id).after(&quot;&lt;div style=\&quot;width:&quot; + $width + &quot;;\&quot; class=&#39;filter_case&#39; id=&#39;filter_&quot; + id + &quot;&#39;&gt;&lt;/div&gt;&lt;span class=&#39;arrowTip&#39;&gt;▼&lt;/span&gt;&quot;);
  } 
}
</code></pre>
<p><strong>根据后台返回的数据加载数据</strong></p>
<pre><code class="javascript">function getFilters(id,msg){
  var html = &quot;&quot;;
    $.each(eval(msg), function (i, n) {
      for(key in n){
        html += &quot;&lt;div onclick=\&quot;inme(&#39;&quot; + n[key] + &quot;&#39;)\&quot;  class=\&quot;div_item\&quot;&gt;&quot; + n[key] + &quot;&lt;/div&gt;&quot;;
      };
    });
  $(&#39;#filter_&#39;+id).html(html);
  $(&#39;#filter_&#39;+id).append(&quot;&lt;div onclick=&#39;NothingClick()&#39; class=\&quot;Nothing\&quot;&gt;无匹配项&lt;/div&gt;&quot;);
}
</code></pre>
<p><strong>弹出列表框</strong></p>
<pre><code class="javascript">$(&quot;.filter_input&quot;).click(function() {
  $(&quot;.arrowTip&quot;).text(&quot;▼&quot;);
  $(&quot;.filter_case&quot;).hide();
  $(&quot;#filter_&quot; + this.id).show();
  $(&quot;#filter_&quot; + this.id).next().text(&quot;▲&quot;);
  return false;
});
</code></pre>
<p><strong>监听文本框输入</strong></p>
<pre><code class="javascript">$(&quot;.filter_input&quot;).keyup(function() {
  $(&quot;#filter_&quot; + this.id).show(); //只要输入就显示列表框 
  if ($(&quot;#&quot;+ this.id).val().length &lt;= 0) {
    $(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).show(); //如果什么都没填，跳出，保持全部显示状态  
    return;
  }
  $(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).hide(); //如果填了，先将所有的选项隐藏  
  var num=0;
  for (var i = 0; i &lt; $(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).length; i++) {
    //模糊匹配，将所有匹配项显示  
    if ($(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).eq(i).text().toLowerCase().indexOf($(&quot;#&quot; + this.id).val().toLowerCase()) &gt;= 0) {
      num++;
      $(&quot;#filter_&quot;+ this.id).find(&quot;.div_item&quot;).eq(i).show();
      $(&#39;.Nothing&#39;).hide();
    }
  }
  if(num==0){
    $(&#39;.Nothing&#39;).show();
  }
});
</code></pre>
<p><strong>模糊项的点击</strong></p>
<pre><code class="javascript">function inme(name) {
   var event = event? event: window.event;      
    var srcObj = ((event.srcElement)?event.srcElement:event.target);       
  $(srcObj).parent().prev().val(name);
};
</code></pre>
<p><strong>点击无匹配</strong></p>
<pre><code class="javascript">function NothingClick(){
  var event = event? event: window.event;      
    var srcObj = ((event.srcElement)?event.srcElement:event.target);   
  $(srcObj).parent().prev().val(&quot;&quot;);
  $(&#39;.Nothing&#39;).hide();
  $(&quot;.filter_case&quot;).hide();
  $(&quot;.div_item&quot;).show();
}
</code></pre>
<p><strong>隐藏列表框</strong></p>
<pre><code class="javascript">$(&quot;body&quot;).click(function() {
  $(&quot;.filter_case&quot;).hide();
  $(&quot;.arrowTip&quot;).text(&quot;▼&quot;);
});
</code></pre>
<h2 id="CSS主要代码"><a href="#CSS主要代码" class="headerlink" title="CSS主要代码"></a>CSS主要代码</h2><pre><code class="css">.filter_wrap{
  display:inline-block;
  position:relative;
}
.arrowTip{
  position:absolute;
  right:5px;
  top:4px;
  color:#c2c2c2;
  font-size:13px;
}
.Nothing{
  height: 30px;
  width: 260px;
  line-height: 30px;
  font-size: 14px;
  text-align:center;
  color:#999;
  display:none;
  cursor:pointer;
}
.filter_case {
  padding:4px 0px 4px 0px;
  position: absolute;
  z-index: 100;
  height:auto;
  max-height: 200px;
  border: 1px solid #999;
  box-sizing:border-box;
  overflow-x: hidden;
  display: none;
  background-color: white;
  margin-top:3px;
  box-shadow: 0 4px 6px rgba(0,0,0,.24);
  border-radius: 2px;
}

.div_item {
  text-indent: 8px;
  height: 30px;
  width: 260px;
  white-space: nowrap;
  line-height: 30px;
  font-size: 13px;
}

.div_item:hover {
  cursor: pointer;
  background-color: #1C86EE;
  color: white;
}
input {
  text-indent: 8px;
  box-sizing:border-box;
  outline: none;
  border:1px solid #999 !important;
  text-indent: 8px;
  height: 30px;
  width: 258px;
  box-sizing:border-box;
  -moz-box-sizing:border-box; /* Firefox */
  -webkit-box-sizing:border-box; /* Safari */
  outline: none;
  border-radius: 2px;
}
</code></pre>
<h2 id="html和CSS部分的一些细节"><a href="#html和CSS部分的一些细节" class="headerlink" title="html和CSS部分的一些细节"></a>html和CSS部分的一些细节</h2><ol>
<li><blockquote>
<p>outline: none;  </p>
<p>outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，为了美观应该去掉</p>
</blockquote>
</li>
<li><blockquote>
<p>box-sizing:border-box;</p>
<p>这可令浏览器呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。</p>
</blockquote>
</li>
<li><blockquote>
<p>autocomplete=”off”</p>
<p>autocomplete是form表单的属性，默认为on，其含义代表是否让浏览器自动记录之前输入的值，应该关闭记录</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常问题整理]]></title>
      <url>/2017/10/21/dailySummary/</url>
      <content type="html"><![CDATA[<p>记录每天学到的知识点或者遇到的问题</p>
<h2 id="从数组里随机取一个数"><a href="#从数组里随机取一个数" class="headerlink" title="从数组里随机取一个数"></a>从数组里随机取一个数</h2><pre><code class="javascript">arr[Math.floor(Math.random()*arr.length)]
</code></pre>
<h2 id="阻止浏览器默认的右键点击事件"><a href="#阻止浏览器默认的右键点击事件" class="headerlink" title="阻止浏览器默认的右键点击事件"></a>阻止浏览器默认的右键点击事件</h2><pre><code class="javascript">window.document.oncontextmenu = function () {  
            return false;  
        }
</code></pre>
<h2 id="左击右击事件"><a href="#左击右击事件" class="headerlink" title="左击右击事件"></a>左击右击事件</h2><pre><code class="javascript">function clickMe() {  
            var event = event ? event : window.event;  
            if (1 == event.which) {  
                //左击  
                }  
            if (3 == event.which) {  
                //右击  
                }  
            }
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
<p>## </p>
<pre><code class="javascript">
</code></pre>
]]></content>
      
        <categories>
            
            <category> 汇总篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
            <tag> jquery </tag>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Mac下通过Hexo在Github上搭建博客（入门篇）]]></title>
      <url>/2017/10/20/hexoBlog/</url>
      <content type="html"><![CDATA[<p>Hexo 快速，简洁且高效的博客框架，让上百个页面在几秒内瞬间完成渲染。Hexo支持Github Flavored Markdown的所有功能，甚至可以整合Octopress的大多数插件，并自己也拥有强大的插件系统。</p>
<p><code>Hexo</code> <code>github</code> <code>Node.js</code> <code>Git</code> <code>markdown</code> <code>themes</code> <code>bash命令</code> <code>npm</code> <code>SSH</code></p>
<h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是<a href="https://hexo.io/docs/index.html" target="_blank" rel="external">Hexo</a>？</h2><ul>
<li>Hexo 是一个快速、简洁且高效的博客框架。</li>
<li>Hexo 使用 <a href="https://baike.baidu.com/item/markdown" target="_blank" rel="external">Markdown</a>（或其他渲染引擎，之后会解释什么是Markdown）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>
</ul>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p><strong>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</strong></p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> （安装Recommended For Most Users那个版本）</li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Git</a></li>
</ul>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><strong>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</strong><br>命令就是你的Launchpad里叫 <code>终端</code> 的app，相当于win的cmd<br>以下出现的$都不是命令的一部分</p>
<blockquote>
<p>$ npm install -g hexo-cli<br>全局安装 hexo 模块，</p>
<p>如果下面的操作报错则需要卸载 hexo：<br>$ npm uninstall hexo</p>
<p>再重新安装 hexo：<br>$ sudo npm install -g hexo<br>输入管理员密码（Mac登录密码）即开始安装</p>
</blockquote>
<h2 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h2><p><strong>初始化, 在指定目录中创建文件目录，以 blog 为例：</strong></p>
<blockquote>
<p>$ hexo init blog</p>
</blockquote>
<p><strong>blog是你建立的文件夹名称，cd到blog文件夹下，安装npm：</strong></p>
<blockquote>
<p>$ cd blog</p>
<p>$ npm install</p>
</blockquote>
<h2 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h2><p><strong>以创建博客 firstBlog为例，标题中包含空格需要用引号将标题引起来</strong></p>
<blockquote>
<p>$ hexo new firstBlog<br>执行该命令后在<code>source/_posts</code>目录下生成文件</p>
</blockquote>
<h2 id="生成博客页面"><a href="#生成博客页面" class="headerlink" title="生成博客页面"></a>生成博客页面</h2><blockquote>
<p>$ hexo generate<br>执行该命令后会生成<code>public</code>目录</p>
<p>$ hexo sever<br>执行命令后启动服务，访问<code>http://localhost:4000/</code>可查看博客</p>
</blockquote>
<p><strong>注意</strong>：</p>
<ul>
<li>之后每次修改完你的博客或者配置内容，都需要用$ hexo sever来开启hexo服务器预览</li>
<li>按 Ctrl+C 停止服务器，以便于进行其他操作</li>
</ul>
<h2 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h2><p>在进行这一步时你需要一个github账号，到 <a href="https://github.com/" target="_blank" rel="external">github官网</a> 用邮箱注册就行，名字尽量简短有意义，我的github地址：<a href="https://github.com/zc95" target="_blank" rel="external">https://github.com/zc95</a></p>
<p>创建仓库登录你的Github帐号，新建仓库，一定要是名为 <code>用户名.github.io</code> 的固定写法（如 <code>zc95.github.io</code> ），我的仓库地址：<a href="https://github.com/zc95/zc95.github.io" target="_blank" rel="external">https://github.com/zc95/zc95.github.io</a></p>
<h2 id="上传到-github"><a href="#上传到-github" class="headerlink" title="上传到 github"></a>上传到 github</h2><p><strong>首次使用配置：</strong></p>
<blockquote>
<p>$ npm install hexo-deplorer-git –save<br>安装 <code>hexo-deplorer-git</code></p>
</blockquote>
<p>打开新建的blog文件夹，找到 <code>_config.yml</code> 配置文件，用记事本打开，Ctrl+F来搜索deploy，type改为git，repository改为你自己的仓库地址，在配置博客站点的_config.yml文件时（包括theme主题站点中的_config.yml），在所有的冒号: 后边都要加一个空格，否则执行hexo命令会报错，切记 切记</p>
<blockquote>
<p>deploy:<br>type: git<br>repository: <code>你的仓库地址</code><br>branch: master</p>
</blockquote>
<p>ok，可以尽情装逼了。。。</p>
<blockquote>
<p>hexo g == hexo generate #生成页面文件</p>
<p>hexo s == hexo server #启动服务预览</p>
<p>hexo d == hexo deploy # 部署到GitHub</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>git clone #克隆主题时用到</p>
<p>cd blog #进入blog文件夹</p>
<p>hexo n “我的博客” == hexo new “我的博客” #新建文章</p>
<p>hexo clean  #清除缓存 网页正常情况下可以忽略此条命令  </p>
<p>hexo g == hexo generate #生成</p>
<p>hexo s == hexo server #启动服务预览</p>
<p>hexo d == hexo deploy # 部署</p>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d #你应该看得懂…</p>
</blockquote>
<h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><pre><code class="javascript">var author = { 
  Name  : &quot;张成&quot;,
  Blog : &quot;http://zc95.github.io&quot;
}
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> Node.js </tag>
            
            <tag> markdown </tag>
            
            <tag> npm </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
